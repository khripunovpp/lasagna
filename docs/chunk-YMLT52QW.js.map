{
  "version": 3,
  "sources": ["src/app/features/settings/service/repositories/credentials.repository.ts"],
  "sourcesContent": ["import {Injectable} from '@angular/core';\nimport {DexieIndexDbService} from '../../../../shared/service/db/dexie-index-db.service';\nimport {Stores} from '../../../../shared/service/db/const/stores';\nimport {Credential} from '../models/Credential';\nimport {CredentialDTO} from '../schemes/Credential.scheme';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CredentialsRepository {\n  constructor(\n    public _indexDbService: DexieIndexDbService,\n  ) {\n  }\n\n  addOne(\n    credential: Credential\n  ) {\n    return this._indexDbService.addData(Stores.CREDENTIALS, credential.toDTO())\n  }\n\n  updateOne(\n    uuid: string,\n    credential: Credential\n  ) {\n    return this._indexDbService.replaceData(Stores.CREDENTIALS, uuid, credential.toDTO());\n  }\n\n  updateMany(\n    credentials: Credential[]\n  ) {\n    return this._indexDbService.replaceManyData(Stores.CREDENTIALS, credentials.map((credential) => credential.toDTO()));\n  }\n\n  async getOne(\n    uuid: Credential | string | undefined,\n  ) {\n    return new Promise<Credential | undefined>(async (resolve, reject) => {\n      uuid = typeof uuid === 'string' ? uuid : (uuid as Credential).uuid;\n      if (!uuid) {\n        resolve(undefined);\n        return;\n      }\n      await this._indexDbService.getOne(Stores.CREDENTIALS, uuid).then((result: CredentialDTO) => {\n        resolve(Credential.fromRaw(result));\n      });\n    });\n  }\n\n  getAll() {\n    return this._indexDbService.getAll<CredentialDTO>(Stores.CREDENTIALS)\n      .then((taxes: CredentialDTO[]) => taxes.map((credential) => Credential.fromRaw(credential)))\n  }\n\n  addMany(\n    taxes: Credential[]\n  ) {\n    return this._indexDbService.balkAdd(Stores.CREDENTIALS, taxes.map((credential) => credential.toDTO()), false);\n  }\n\n  deleteOne(\n    uuid: string\n  ) {\n    return this._indexDbService.remove(Stores.CREDENTIALS, uuid);\n  }\n\n  getAllByType(type: 'system' | 'customer') {\n    return this._indexDbService.search(Stores.CREDENTIALS, 'type', type)\n      .then((credentials: CredentialDTO[]) => credentials.map((credential) => Credential.fromRaw(credential)));\n  }\n\n\n  getAllSystemCredentials() {\n    return this._indexDbService.search(Stores.CREDENTIALS, 'type', 'system')\n      .then((credentials: CredentialDTO[]) => credentials.map((credential) => Credential.fromRaw(credential)));\n  }\n\n  getAllCustomersCredentials() {\n    return this._indexDbService.search(Stores.CREDENTIALS, 'type', 'customer')\n      .then((credentials: CredentialDTO[]) => credentials.map((credential) => Credential.fromRaw(credential)));\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AASM,IAAO,wBAAP,MAAO,uBAAqB;EAEvB;EADT,YACS,iBAAoC;AAApC,SAAA,kBAAA;EAET;EAEA,OACE,YAAsB;AAEtB,WAAO,KAAK,gBAAgB,QAAQ,OAAO,aAAa,WAAW,MAAK,CAAE;EAC5E;EAEA,UACE,MACA,YAAsB;AAEtB,WAAO,KAAK,gBAAgB,YAAY,OAAO,aAAa,MAAM,WAAW,MAAK,CAAE;EACtF;EAEA,WACE,aAAyB;AAEzB,WAAO,KAAK,gBAAgB,gBAAgB,OAAO,aAAa,YAAY,IAAI,CAAC,eAAe,WAAW,MAAK,CAAE,CAAC;EACrH;EAEA,MAAM,OACJ,MAAqC;AAErC,WAAO,IAAI,QAAgC,OAAO,SAAS,WAAU;AACnE,aAAO,OAAO,SAAS,WAAW,OAAQ,KAAoB;AAC9D,UAAI,CAAC,MAAM;AACT,gBAAQ,MAAS;AACjB;MACF;AACA,YAAM,KAAK,gBAAgB,OAAO,OAAO,aAAa,IAAI,EAAE,KAAK,CAAC,WAAyB;AACzF,gBAAQ,WAAW,QAAQ,MAAM,CAAC;MACpC,CAAC;IACH,CAAC;EACH;EAEA,SAAM;AACJ,WAAO,KAAK,gBAAgB,OAAsB,OAAO,WAAW,EACjE,KAAK,CAAC,UAA2B,MAAM,IAAI,CAAC,eAAe,WAAW,QAAQ,UAAU,CAAC,CAAC;EAC/F;EAEA,QACE,OAAmB;AAEnB,WAAO,KAAK,gBAAgB,QAAQ,OAAO,aAAa,MAAM,IAAI,CAAC,eAAe,WAAW,MAAK,CAAE,GAAG,KAAK;EAC9G;EAEA,UACE,MAAY;AAEZ,WAAO,KAAK,gBAAgB,OAAO,OAAO,aAAa,IAAI;EAC7D;EAEA,aAAa,MAA2B;AACtC,WAAO,KAAK,gBAAgB,OAAO,OAAO,aAAa,QAAQ,IAAI,EAChE,KAAK,CAAC,gBAAiC,YAAY,IAAI,CAAC,eAAe,WAAW,QAAQ,UAAU,CAAC,CAAC;EAC3G;EAGA,0BAAuB;AACrB,WAAO,KAAK,gBAAgB,OAAO,OAAO,aAAa,QAAQ,QAAQ,EACpE,KAAK,CAAC,gBAAiC,YAAY,IAAI,CAAC,eAAe,WAAW,QAAQ,UAAU,CAAC,CAAC;EAC3G;EAEA,6BAA0B;AACxB,WAAO,KAAK,gBAAgB,OAAO,OAAO,aAAa,QAAQ,UAAU,EACtE,KAAK,CAAC,gBAAiC,YAAY,IAAI,CAAC,eAAe,WAAW,QAAQ,UAAU,CAAC,CAAC;EAC3G;;qCAvEW,wBAAqB,mBAAA,mBAAA,CAAA;EAAA;4EAArB,wBAAqB,SAArB,uBAAqB,WAAA,YAFpB,OAAM,CAAA;;;sEAEP,uBAAqB,CAAA;UAHjC;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
