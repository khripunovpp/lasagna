{
  "version": 3,
  "sources": ["src/app/shared/view/ui/import/import-row-tpl.directive.ts", "src/app/shared/view/ui/import/import.component.ts", "src/app/shared/view/ui/expander.component.ts"],
  "sourcesContent": ["import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[lgImportRowTpl]',\n  standalone: true,\n})\nexport class ImportRowTplDirective {\n  constructor(\n    public templateRef: TemplateRef<any>,\n  ) {\n\n  }\n}\n", "import {Component, contentChild, inject, Input, input, model, output, viewChild, ViewChild} from '@angular/core';\n\nimport {UploadComponent} from '../../../../features/controls/form/upload.component';\nimport {ButtonComponent} from '../button.component';\nimport {ZodObject} from 'zod';\nimport {Stores} from '../../../service/db/const/stores';\nimport {CsvReaderService} from '../../../service/services/csv-reader.service';\nimport {Observable, scan, startWith, Subject} from 'rxjs';\nimport {DialogComponent} from '../dialogs/dialog.component';\nimport {AsyncPipe, NgClass, NgTemplateOutlet} from '@angular/common';\nimport {FlexRowComponent} from '../../layout/flex-row.component';\nimport {FlexColumnComponent} from '../../layout/flex-column.component';\nimport {FormsModule} from '@angular/forms';\nimport {DexieIndexDbService} from '../../../service/db/dexie-index-db.service';\nimport {ImportRowTplDirective} from './import-row-tpl.directive';\nimport {PortalComponent} from '../portal.component';\nimport {TranslatePipe} from '@ngx-translate/core';\nimport {NotificationsService} from '../../../service/services';\nimport {errorHandler} from '../../../helpers';\n\n@Component({\n  selector: 'lg-import',\n  standalone: true,\n  imports: [\n    UploadComponent,\n    ButtonComponent,\n    DialogComponent,\n    AsyncPipe,\n    FlexRowComponent,\n    FlexColumnComponent,\n    FormsModule,\n    NgClass,\n    NgTemplateOutlet,\n    PortalComponent,\n    TranslatePipe\n  ],\n  template: `\n    <lg-upload (filesSelected)=\"onFileSelected($event)\" [accept]=\"'.json'\">\n      <lg-button [flat]=\"true\"\n                 [size]=\"'small'\"\n                 [style]=\"'solid'\">\n        {{ label|translate }}\n      </lg-button>\n    </lg-upload>\n\n    <div #dialog>\n      <lg-dialog (onCancel)=\"onClose()\"\n                 [cancelButtonText]=\"'close-label'|translate\"\n                 [confirmButtonText]=\"'confirm-label'|translate\"\n                 (onConfirm)=\"onConfirm()\">\n        <lg-flex-column>\n          @if (data$ | async; as data) {\n            @if (analize$ | async; as duplicates) {\n              <lg-flex-column [size]=\"'medium'\">\n                @for (row of data; track row.name + row.uuid; let i = $index) {\n                  <lg-flex-column [size]=\"'small'\">\n\n                    <div class=\"import-row\"\n                         [class.update]=\"rowsToUpdate[row.name]\"\n                         [class.add]=\"rowsToAdd[row.name]\"\n                         [class.disabled]=\"rowsToSkip[row.name]\">\n\n                      @if ((duplicates[row.uuid] || duplicates[row.name])) {\n                        <input [(ngModel)]=\"rowsToUpdate[row.name]\"\n                               [disabled]=\"rowsToSkip[row.name]\"\n                               type=\"checkbox\">\n                        {{ 'update-label'|translate }}\n                      } @else {\n                        <input [(ngModel)]=\"rowsToAdd[row.name]\"\n                               [disabled]=\"rowsToSkip[row.name]\"\n                               checked\n                               type=\"checkbox\">\n                        {{ 'add-label'|translate }}\n                      }\n\n                      @if (rowTemplate()) {\n                        <ng-container\n                          *ngTemplateOutlet=\"rowTemplate()!.templateRef; context: {$implicit: row, flow: 'new'}\"></ng-container>\n                      }\n\n                    </div>\n\n                    @if ((duplicates[row.uuid] || duplicates[row.name])) {\n                      <div class=\"import-row\"\n                           [ngClass]=\"rowsToSkip[row.name] ? 'skip' : 'duplicated'\"\n                           [class.disabled]=\"rowsToUpdate[row.name]\"\n                           [class.skip]=\"rowsToUpdate[row.name]\"\n                           style=\"margin-left: 16px\">\n                        <input [(ngModel)]=\"rowsToSkip[row.name]\"\n                               [disabled]=\"rowsToAdd[row.name] || rowsToUpdate[row.name]\"\n                               type=\"checkbox\">\n                        <span>{{ (rowsToSkip[row.name] ? 'skip-label' : 'duplicates-label') | translate }}</span>\n                        @if (rowTemplate()) {\n                          <ng-container\n                            *ngTemplateOutlet=\"rowTemplate()!.templateRef; context: {$implicit: (duplicates[row.uuid] || duplicates[row.name]), flow: 'old'}\"></ng-container>\n                        }\n                      </div>\n                    }\n                  </lg-flex-column>\n                }\n              </lg-flex-column>\n            }\n          }\n\n          <lg-flex-row [center]=\"true\" [hidden]=\"replaceAll()\" [size]=\"'small'\">\n            <input (change)=\"onSkipAllDuplicates()\"\n                   [(ngModel)]=\"skipAllDuplicates\"\n                   type=\"checkbox\">\n            <label>\n              {{ 'skip-duplicates-label'|translate }}\n            </label>\n          </lg-flex-row>\n\n          <lg-flex-row [center]=\"true\" [hidden]=\"skipAllDuplicates()\" [size]=\"'small'\">\n            <input (change)=\"onReplaceAll()\" [(ngModel)]=\"replaceAll\"\n                   type=\"checkbox\">\n            <label>\n              {{ 'replace-duplicates-label'|translate }}\n            </label>\n          </lg-flex-row>\n        </lg-flex-column>\n      </lg-dialog>\n    </div>\n\n\n    <lg-portal [appendTarget]=\"'body'\" [targetElement]=\"dialog\">\n\n    </lg-portal>\n  `,\n  styles: [`\n    .import-row {\n      display: flex;\n      flex-direction: row;\n      gap: 8px;\n      border: 1px solid #f5f5f5;\n      border-radius: 24px;\n      padding: 8px 16px;\n    }\n\n    .import-row.disabled {\n      opacity: 0.5;\n    }\n\n    .import-row.skip {\n      border-color: #008ad8;\n      background-color: #dceaff;\n    }\n\n    .import-row.duplicated {\n      border-color: #ffbaba;\n      background-color: #fff4f4;\n    }\n\n    .import-row.update {\n      border-color: #8ca68c;\n      background-color: #e5f4e3;\n    }\n\n    .import-row.add {\n      border-color: #8ca68c;\n      background-color: #e5f4e3;\n    }\n  `],\n})\nexport class ImportComponent {\n  constructor(\n    private _csvReaderService: CsvReaderService,\n    private _indexDbService: DexieIndexDbService,\n  ) {\n  }\n\n  @Input() label: string = 'import-label';\n  rowsToAdd: Record<number, any> = {};\n  rowsToUpdate: Record<number, any> = {};\n  rowsToSkip: Record<number, any> = {};\n  onDone = output();\n  storeName = input<Stores | null>(null);\n  schema = input<ZodObject<any>>();\n  skipAllDuplicates = model<boolean>(false);\n  replaceAll = model<boolean>(false);\n  rowTemplate = contentChild(ImportRowTplDirective);\n  analizeSubject = new Subject<any>();\n  dataSubject = new Subject<any>();\n  data$: Observable<any[]> = this.dataSubject.asObservable().pipe(\n    startWith([]),\n    scan((acc, value) => {\n      if (value == null) {\n        return []\n      }\n      return [\n        ...acc,\n        value,\n      ]\n    }),\n  );\n  analize$: Observable<Record<string, any>> = this.analizeSubject.asObservable().pipe(\n    startWith([]),\n    scan((acc, value) => {\n      if (value == null) {\n        return []\n      }\n      if (!value.uuid || !value.name) {\n        return acc;\n      }\n      return {\n        ...acc,\n        [value.uuid]: value,\n        [value.name]: value,\n      }\n    }),\n  );\n\n  @ViewChild(DialogComponent) dialog!: DialogComponent;\n  upload = viewChild<UploadComponent>(UploadComponent);\n  parsedData: any[] = [];\n\n  async onConfirm() {\n    for (const item of this.parsedData) {\n      if (this.rowsToAdd[item.name]) {\n        await this._indexDbService.addData(this.storeName() as Stores, item, item.uuid);\n      } else if (this.rowsToUpdate[item.name] && !this.skipAllDuplicates()) {\n        await this._indexDbService.replaceData(this.storeName() as Stores, item.uuid, item);\n      }\n    }\n\n    this.clear();\n    this.onDone.emit();\n    this.dialog.close();\n  }\n\n  onClose() {\n    this.clear();\n    this.dialog.close();\n  }\n\n  clear() {\n    this.upload()!.clear();\n    this.rowsToAdd = {};\n    this.rowsToUpdate = {};\n    this.rowsToSkip = {};\n    this.parsedData = [];\n    this.dataSubject.next(null);\n    this.analizeSubject.next(null);\n    this.skipAllDuplicates.set(false);\n    this.replaceAll.set(false);\n\n  }\n\n  onReplaceAll() {\n    if (this.replaceAll()) {\n      this.parsedData.forEach((item) => {\n        if (this.rowsToAdd[item.name]) {\n          return;\n        }\n        this.rowsToUpdate[item.name] = true;\n      });\n    } else {\n      this.rowsToAdd = {};\n    }\n  }\n\n  private readonly _notificationsService = inject(NotificationsService);\n\n  onSkipAllDuplicates() {\n    if (this.skipAllDuplicates()) {\n      this.parsedData.forEach((item) => {\n        if (this.rowsToAdd[item.name]) {\n          return;\n        }\n        this.rowsToSkip[item.name] = true;\n\n        if (this.rowsToUpdate[item.name]) {\n          this.rowsToUpdate[item.name] = false;\n        }\n      });\n    } else {\n      this.rowsToSkip = {};\n    }\n  }\n\n  async onFileSelected(file: File[]) {\n    try {\n      this.dialog.open();\n      const result = await this._csvReaderService.readFromJSONFile(file[0]);\n      for (const record of result) {\n        await this._validateData(record);\n\n        if (!this.storeName()) {\n          console.log('storeName is not set');\n          return;\n        }\n\n        this.dataSubject.next(record);\n        this.parsedData.push(record);\n\n        await this._analyzeDuplicates(record).then((data) => {\n          if (data.duplicate) {\n            this.analizeSubject.next(data.data[0]);\n          } else {\n            this.rowsToAdd[record.name] = true\n          }\n        });\n      }\n    } catch (e) {\n      this._notificationsService.error('Can not import data: ' + errorHandler(e));\n    }\n    // this._csvReaderService.readFromJSONFile(file[0]).then(async (data) => {\n    //   for (const record of data) {\n    //     console.log({record})\n    //     const dataValidated = this.schema()?.safeParse(record);\n    //     if (!dataValidated?.success) {\n    //       console.log('error', dataValidated?.error);\n    //       return;\n    //     }\n    //     if (!this.storeName()) {\n    //       console.log('storeName is not set');\n    //       return;\n    //     }\n    //     this.dataSubject.next(record);\n    //     this.parsedData.push(dataValidated.data);\n    //\n    //     await this._analyzeDuplicates(dataValidated.data).then((data) => {\n    //       if (data.duplicate) {\n    //         this.analizeSubject.next(data.data[0]);\n    //       } else {\n    //         this.rowsToAdd[record.name] = true\n    //       }\n    //     });\n    //   }\n    //\n    // });\n  }\n\n  private async _validateData(data:any) {\n    console.log({\n      schema: this.schema(),\n      data,\n    })\n    const dataValidated = await this.schema()?.safeParseAsync(data);\n    if (!dataValidated?.success) {\n      throw new Error(dataValidated?.error.toString());\n    }\n  }\n\n  private _analyzeDuplicates(\n    data: any,\n  ) {\n    return new Promise<{\n      data: any;\n      duplicate: boolean\n    }>((resolve, reject) => {\n      this._indexDbService.search(this.storeName() as Stores, 'name', data.name).then((result: any) => {\n        if (result.length) {\n          resolve({\n            data: result,\n            duplicate: true,\n          });\n        } else {\n          resolve({\n            data: null,\n            duplicate: false,\n          });\n        }\n      });\n    });\n  }\n}\n", "import {Component, Input, signal} from '@angular/core';\nimport {FlexColumnComponent} from '../layout/flex-column.component';\nimport {TranslatePipe} from '@ngx-translate/core';\n\n@Component({\n  selector: 'lg-expander',\n  standalone: true,\n  template: `\n    <div class=\"expander\"\n         [class.opened]=\"opened()\">\n      @if (opened()) {\n        <div class=\"expander__header\">\n          <div (click)=\"toggle()\" class=\"expander__close\">\n            {{ (closeLabel ?? 'close-label') | translate }}\n          </div>\n        </div>\n\n        <div class=\"expander__content\">\n          <lg-flex-column size=\"medium\">\n            <ng-content></ng-content>\n          </lg-flex-column>\n        </div>\n      } @else {\n        <div class=\"expander__header\">\n          <div (click)=\"toggle()\" class=\"expander__trigger\">\n            {{ (openLabel ?? 'open-label') | translate }}\n          </div>\n        </div>\n      }\n    </div>\n  `,\n  imports: [\n    FlexColumnComponent,\n    TranslatePipe\n  ],\n  styles: [\n    `\n      .expander {\n        display: flex;\n        flex-direction: column;\n        border-radius: 32px;\n        background-color: #fff;\n        overflow: hidden;\n      }\n\n      .expander__trigger,\n      .expander__close {\n        cursor: pointer;\n      }\n\n      .expander__close {\n        text-align: right;\n      }\n\n      .expander__header {\n        padding: 24px;\n      }\n\n      .expander__content {\n        padding: 24px;\n      }\n\n      .expander.opened {\n        .expander__header {\n          background-color: var(--control-bg);\n        }\n      }\n    `\n  ]\n})\nexport class ExpanderComponent {\n  constructor() {\n  }\n\n  size= signal<\n    'tiny' | 'small' | 'medium' | 'large'\n  >('medium');\n  opened = signal(false);\n  @Input() openLabel: string = 'Open';\n  @Input() closeLabel: string = 'Close';\n\n  toggle() {\n    this.opened.set(!this.opened());\n  }\n}\n"],
  "mappings": "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",
  "names": ["_c0"]
}
