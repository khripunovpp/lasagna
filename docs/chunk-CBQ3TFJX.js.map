{
  "version": 3,
  "sources": ["src/app/shared/view/ui/form/chckbox.component.ts"],
  "sourcesContent": ["import {Component, forwardRef, HostListener, Input, input, output, ViewEncapsulation} from '@angular/core';\nimport {ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {NgClass} from '@angular/common';\n\n@Component({\n  selector: 'lg-checkbox',\n  standalone: true,\n  template: `\n    <label [attr.for]=\"name()+'-'+value\"\n           [ngClass]=\"size()\"\n           class=\"lg-checkbox\"\n           tabindex=\"0\">\n      <input (ngModelChange)=\"onChangeCheckbox($event)\"\n             [attr.id]=\"name()+'-'+value\"\n             [attr.name]=\"name()\"\n             [ngModel]=\"modelValue\"\n             class=\"checkbox\"\n             type=\"checkbox\"/>\n      <span [class.lg-checkbox__hoverOnly]=\"markOnHover()\"\n            class=\"lg-checkbox__mark\">\n              <span class=\"lg-checkbox__mark-inner\">\n                  @if (!noMark()) {\n                    @if (customMark()) {\n                      <span [innerHTML]=\"customMark()\"></span>\n                    } @else {\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\"\n                           viewBox=\"0 0 24 24\">\n                        <path fill=\"currentColor\"\n                              d=\"M9.5 16.5l-4.25-4.25 1.4-1.4L9.5 13.7l7.35-7.35 1.4 1.4z\"/>\n                      </svg>\n                    }\n                  }\n              </span>\n          </span>\n\n      <ng-content></ng-content>\n    </label>\n  `,\n  styles: [\n    `\n      .lg-checkbox {\n        display: flex;\n        border-radius: 12px;\n        gap: 8px;\n      }\n\n      .lg-checkbox:focus-within {\n        outline-color: var(--active-color);\n      }\n\n      .lg-checkbox__mark {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 51px;\n        height: 51px;\n        border-radius: 12px;\n        background-color: var(--control-bg);\n        opacity: 0.5;\n        cursor: pointer;\n        transition: all 0.2s ease-in-out;\n        border: 1px solid transparent;\n\n        &-inner {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n      }\n\n      .lg-checkbox__hoverOnly {\n        background-color: transparent;\n        border-color: var(--text-color);\n      }\n\n      .lg-checkbox__hoverOnly .lg-checkbox__mark-inner {\n        opacity: 0;\n        transition: all 0.2s ease-in-out;\n      }\n\n      @media (hover: hover) {\n        .lg-checkbox__mark:hover {\n          opacity: 1;\n        }\n\n        .lg-checkbox__hoverOnly:hover .lg-checkbox__mark-inner {\n          opacity: 1;\n        }\n      }\n\n      .checkbox {\n        display: none;\n      }\n\n      .checkbox:checked + .lg-checkbox__mark {\n        background-color: var(--control-bg-selected);\n        opacity: 1;\n        font-weight: 700;\n      }\n\n      .checkbox:checked + .lg-checkbox__hoverOnly {\n\n        border-color: var(--control-bg-selected);\n      }\n\n      .checkbox:checked + .lg-checkbox__hoverOnly .lg-checkbox__mark-inner {\n        opacity: 1;\n\n      }\n\n      .lg-checkbox.small .lg-checkbox__mark {\n        width: 16px;\n        height: 16px;\n        border-radius: 6px;\n      }\n\n      .lg-checkbox.medium .lg-checkbox__mark {\n        width: 24px;\n        height: 24px;\n        border-radius: 8px;\n      }\n    `\n  ],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CheckboxComponent),\n      multi: true,\n    }\n  ],\n  imports: [\n    FormsModule,\n    NgClass\n  ]\n})\nexport class CheckboxComponent\n  implements ControlValueAccessor {\n  constructor() {\n  }\n\n  @Input() value: string | number = '';\n  modelValue: boolean = false;\n  name = input<string>('');\n  labelId = input<string>('');\n  size = input<\n    'small' | 'default' | 'large' | 'medium'\n  >('default');\n  markOnHover = input<boolean>(false);\n  noMark = input<boolean>(false);\n  customMark = input<string>('');\n  onCheckboxChanged = output<boolean>();\n\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  onKeydown(event: KeyboardEvent) {\n    event.preventDefault();\n    this.onChangeCheckbox(!this.modelValue);\n  }\n\n  onChange: (value: boolean) => void = () => {\n  };\n\n  onTouched: () => void = () => {\n  };\n\n  writeValue(value: boolean): void {\n    this._change(value);\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  onChangeCheckbox(\n    value: boolean\n  ) {\n    this._change(value);\n  }\n\n\n  private _change(value: boolean) {\n    this.modelValue = value;\n    this.onChange(this.modelValue);\n    this.onCheckboxChanged.emit(this.modelValue);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBsB,IAAA,oBAAA,GAAA,QAAA,CAAA;;;;AAAM,IAAA,qBAAA,aAAA,OAAA,WAAA,GAAA,wBAAA;;;;;;AAEN,IAAA,yBAAA,GAAA,OAAA,CAAA;AAEE,IAAA,oBAAA,GAAA,QAAA,CAAA;AAEF,IAAA,uBAAA;;;;;AAPF,IAAA,8BAAA,GAAA,wDAAA,GAAA,GAAA,QAAA,CAAA,EAAoB,GAAA,wDAAA,GAAA,GAAA,YAAA,CAAA;;;;AAApB,IAAA,wBAAA,OAAA,WAAA,IAAA,IAAA,CAAA;;;AAkHd,IAAO,oBAAP,MAAO,mBAAiB;EAE5B,cAAA;EACA;EAES,QAAyB;EAClC,aAAsB;EACtB,OAAO,MAAc,EAAE;EACvB,UAAU,MAAc,EAAE;EAC1B,OAAO,MAEL,SAAS;EACX,cAAc,MAAe,KAAK;EAClC,SAAS,MAAe,KAAK;EAC7B,aAAa,MAAc,EAAE;EAC7B,oBAAoB,OAAM;EAI1B,UAAU,OAAoB;AAC5B,UAAM,eAAc;AACpB,SAAK,iBAAiB,CAAC,KAAK,UAAU;EACxC;EAEA,WAAqC,MAAK;EAC1C;EAEA,YAAwB,MAAK;EAC7B;EAEA,WAAW,OAAc;AACvB,SAAK,QAAQ,KAAK;EACpB;EAEA,iBAAiB,IAAO;AACtB,SAAK,WAAW;EAClB;EAEA,kBAAkB,IAAO;AACvB,SAAK,YAAY;EACnB;EAEA,iBACE,OAAc;AAEd,SAAK,QAAQ,KAAK;EACpB;EAGQ,QAAQ,OAAc;AAC5B,SAAK,aAAa;AAClB,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,kBAAkB,KAAK,KAAK,UAAU;EAC7C;;qCArDW,oBAAiB;EAAA;yEAAjB,oBAAiB,WAAA,CAAA,CAAA,aAAA,CAAA,GAAA,cAAA,SAAA,+BAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;AAAjB,MAAA,qBAAA,iBAAA,SAAA,mDAAA,QAAA;AAAA,eAAA,IAAA,UAAA,MAAA;MAAiB,CAAA,EAAA,iBAAA,SAAA,mDAAA,QAAA;AAAA,eAAjB,IAAA,UAAA,MAAA;MAAiB,CAAA;;oRAZjB;IACT;MACE,SAAS;MACT,aAAa,WAAW,MAAM,kBAAiB;MAC/C,OAAO;;GAEV,CAAA,GAAA,oBAAA,KAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,YAAA,KAAA,GAAA,eAAA,GAAA,SAAA,GAAA,CAAA,QAAA,YAAA,GAAA,YAAA,GAAA,iBAAA,SAAA,GAAA,CAAA,GAAA,mBAAA,GAAA,CAAA,GAAA,yBAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,SAAA,8BAAA,SAAA,MAAA,UAAA,MAAA,WAAA,WAAA,GAAA,CAAA,QAAA,gBAAA,KAAA,0DAAA,CAAA,GAAA,UAAA,SAAA,2BAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;;AA1HC,MAAA,yBAAA,GAAA,SAAA,CAAA,EAGoB,GAAA,SAAA,CAAA;AACX,MAAA,qBAAA,iBAAA,SAAA,0DAAA,QAAA;AAAA,eAAiB,IAAA,iBAAA,MAAA;MAAwB,CAAA;AAAhD,MAAA,uBAAA;AAMA,MAAA,yBAAA,GAAA,QAAA,CAAA,EACgC,GAAA,QAAA,CAAA;AAEpB,MAAA,8BAAA,GAAA,0CAAA,GAAA,CAAA;AAWJ,MAAA,uBAAA,EAAO;AAGf,MAAA,uBAAA,CAAA;AACF,MAAA,uBAAA;;;AA3BO,MAAA,qBAAA,WAAA,IAAA,KAAA,CAAA;;AAME,MAAA,oBAAA;AAAA,MAAA,qBAAA,WAAA,IAAA,UAAA;;AAGD,MAAA,oBAAA;AAAA,MAAA,sBAAA,0BAAA,IAAA,YAAA,CAAA;AAGM,MAAA,oBAAA,CAAA;AAAA,MAAA,wBAAA,CAAA,IAAA,OAAA,IAAA,IAAA,EAAA;;oBA+Gd,aAAW,8BAAA,iBAAA,SACX,OAAO,GAAA,QAAA,CAAA,wrDAAA,GAAA,eAAA,EAAA,CAAA;;;sEAGE,mBAAiB,CAAA;UApI7B;uBACW,eAAa,YACX,MAAI,UACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8BT,eAsFc,kBAAkB,MAAI,WAC1B;MACT;QACE,SAAS;QACT,aAAa,WAAW,MAAK,iBAAkB;QAC/C,OAAO;;OAEV,SACQ;MACP;MACA;OACD,QAAA,CAAA,wrDAAA,EAAA,CAAA;kBAOQ,OAAK,CAAA;UAAb;MAcD,WAAS,CAAA;UAFR;WAAa,iBAAiB,CAAC,QAAQ,CAAC;;UACxC;WAAa,iBAAiB,CAAC,QAAQ,CAAC;;;;6EAlB9B,mBAAiB,EAAA,WAAA,qBAAA,UAAA,oDAAA,YAAA,IAAA,CAAA;AAAA,GAAA;",
  "names": []
}
