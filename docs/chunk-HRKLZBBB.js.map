{
  "version": 3,
  "sources": ["src/app/shared/service/services/docs.service.ts"],
  "sourcesContent": ["// üìÅ src/app/services/docs.service.ts\nimport {inject, Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, firstValueFrom} from 'rxjs';\nimport {DexieIndexDbService} from '../db/dexie-index-db.service';\nimport {Stores} from '../db/const/stores';\nimport {USER_LANGUAGE} from '../../../features/settings/service/providers/user-language.token';\n\nexport interface DocFile {\n  type: 'file';\n  name: string;\n  path: string;\n  title: string;\n  html: string;\n  language?: string;\n  order?: number; // Used for sorting, not stored in DB\n}\n\nexport interface TreeNode {\n  type: 'folder' | 'file';\n  name: string;\n  path?: string;\n  title?: string;\n  language?: string;\n  children?: TreeNode[];\n  _expanded?: boolean; // Used for UI state, not stored in DB\n  order?: number; // Used for sorting, not stored in DB\n}\n\n\ninterface MetaInfo {\n  updatedAt: string;\n}\n\n\n@Injectable({providedIn: 'root'})\nexport class DocsService {\n  constructor(\n    private _http: HttpClient,\n    private _indexedDB: DexieIndexDbService,\n  ) {\n  }\n\n  orderTitles: Record<string, number> = {\n    'getting-started': 1,\n    'invoices': 4,\n    'settings': 5,\n    'recipes': 3,\n    'storage': 2,\n  };\n  private _userLang = inject(USER_LANGUAGE);\n  private docs$ = new BehaviorSubject<DocFile[]>([]);\n  private tree$ = new BehaviorSubject<TreeNode[]>([]);\n\n  async init() {\n    try {\n      const remoteMeta = await firstValueFrom(this._http.get<MetaInfo>('./docs/meta.json'));\n      const localData = await this._indexedDB.getAll(Stores.DOCUMENTATION);\n      const localMeta = localData?.find((item: any) => item.key === 'meta')?.value;\n\n      const needsUpdate = !localMeta || new Date(remoteMeta.updatedAt) > new Date(localMeta.updatedAt);\n\n      if (needsUpdate) {\n        const [data, tree]: [\n          DocFile[],\n          TreeNode[]\n        ] = await Promise.all([\n          firstValueFrom(this._http.get<DocFile[]>('./docs/data.json')),\n          firstValueFrom(this._http.get<TreeNode[]>('./docs/tree.json')),\n        ]);\n\n        await this._indexedDB.balkAdd(Stores.DOCUMENTATION, [\n          {\n            key: 'meta',\n            value: remoteMeta,\n          },\n          {\n            key: 'data',\n            value: data,\n          },\n          {\n            key: 'tree',\n            value: tree,\n          },\n        ]);\n\n        this.docs$.next(data);\n        this.tree$.next(tree);\n      } else {\n        const docsRecords = await this._getStoredDocs();\n\n        this.tree$.next(docsRecords.tree);\n        this.docs$.next(docsRecords.docs);\n      }\n    } catch (error) {\n      console.error('Failed to initialize docs service:', error);\n      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n      // throw new Error(`Failed to initialize docs service: ${error}`);\n    }\n  }\n\n  filterLanguage(node: TreeNode, lang: string): TreeNode | null {\n    if (node.language && node.language !== lang) {\n      return null;\n    }\n    if (node.type === 'file') {\n      return node;\n    }\n\n    const filteredChildren: TreeNode[] = (node.children || []).reduce((acc: TreeNode[], child: TreeNode) => {\n      const filteredChild = this.filterLanguage(child, lang);\n\n      if (filteredChild) {\n        acc.push(filteredChild);\n      }\n      return acc;\n    }, []);\n\n    if (filteredChildren.length > 0) {\n      return {\n        ...node,\n        children: filteredChildren\n          .toSorted((a: TreeNode, b: TreeNode) => {\n            return (a.order || 0) - (b.order || 0);\n          }),\n      };\n    }\n\n    return null;\n  }\n\n  getDocsView() {\n    return this.docs$.getValue();\n  }\n\n  getDocs() {\n    return this.docs$.asObservable();\n  }\n\n  getTree() {\n    return this.tree$.asObservable();\n  }\n\n  async getDocByPath(path: string) {\n    // return await this.db.docs.get(path);\n  }\n\n  private async _getStoredDocs() {\n    const docsRecords = await this._indexedDB.getAll(Stores.DOCUMENTATION);\n\n    const tree = (docsRecords\n      ?.find((item: any) => item.key === 'tree')?.value.reduce((acc: any, item: TreeNode) => {\n        const filteredNode = this.filterLanguage(item, this._userLang());\n        if (filteredNode) {\n          acc.push(filteredNode);\n        }\n        return acc;\n      }, []) || []).toSorted((a: TreeNode, b: TreeNode) =>\n      (this.orderTitles[a.name || ''] || 0) - (this.orderTitles[b.name || ''] || 0));\n    const docs = docsRecords?.find((item: any) => item.key === 'data')?.value;\n\n    return {\n      tree,\n      docs,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
