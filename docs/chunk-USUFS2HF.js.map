{
  "version": 3,
  "sources": ["src/app/shared/view/ui/form/control-item/control-label-template.directive.ts", "src/app/shared/view/ui/form/control-item/control.component.ts"],
  "sourcesContent": ["import {Directive, inject, input, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[lgControlLabelTemplate]',\n  exportAs: 'lgControlLabelTemplate',\n  host: {}\n})\nexport class ControlLabelTemplateDirective {\n  templateRef = inject(TemplateRef);\n  /**\n   * Position of the label in the control.\n   * Possible values: 'before', 'after', 'end'.\n   */\n  position = input<string | null>(null);\n}\n", "import {Component, computed, contentChildren, input, ViewEncapsulation} from '@angular/core';\nimport {ControlLabelTemplateDirective} from './control-label-template.directive';\nimport {NgTemplateOutlet} from '@angular/common';\n\n@Component({\n  selector: 'lg-control',\n  template: `\n    <div [style.flex-direction]=\"flow()\"\n         class=\"control\">\n      @if (label() || commonLabelTpl()) {\n        <label [attr.for]=\"labelFor()\" class=\"control__label\">\n          <ng-container *ngTemplateOutlet=\"beforeLabelTpl()\"></ng-container>\n\n          <span class=\"control__label-string\">\n          @if (commonLabelTpl()) {\n            <ng-container *ngTemplateOutlet=\"commonLabelTpl()\"></ng-container>\n          } @else if (label()) {\n            {{ label() }}\n          }\n        </span>\n          <ng-container *ngTemplateOutlet=\"afterLabelTpl()\"></ng-container>\n\n          @if (endLabelTpl()) {\n            <span class=\"control__label-end\">\n            <ng-container *ngTemplateOutlet=\"endLabelTpl()\"></ng-container>\n          </span>\n          }\n        </label>\n      }\n\n      <div class=\"control__content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n        width: 100%;\n      }\n\n      .control {\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n\n      .control__label {\n        font-size: 14px;\n        display: flex;\n        align-items: flex-end;\n        gap: 8px;\n        min-width: 0;\n\n        &-string {\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          width: 100%;\n          display: inline-block;\n        }\n      }\n\n      .control__label-end {\n        display: flex;\n        align-items: flex-end;\n        gap: 8px;\n        margin-left: auto;\n      }\n\n      .control__label-end:empty {\n        display: none;\n      }\n\n      .control__label-string:empty {\n        display: none;\n      }\n\n      .control__content {\n        display: flex;\n      }\n    `\n  ],\n  imports: [\n    NgTemplateOutlet,\n    ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ControlComponent {\n  constructor() {\n  }\n\n  label = input('');\n  flow = input<'row' | 'column' | 'column-reverse' | 'row-reverse'>('column');\n  labelFor = input<string | null>(null);\n  labelTpls = contentChildren(ControlLabelTemplateDirective);\n  beforeLabelTpl = computed(() => {\n    return this.labelTpls().find(tpl => tpl.position() === 'before')?.templateRef || null;\n  });\n\n  afterLabelTpl = computed(() => {\n    return this.labelTpls().find(tpl => tpl.position() === 'after')?.templateRef || null;\n  });\n\n  endLabelTpl = computed(() => {\n    return this.labelTpls().find(tpl => tpl.position() === 'end')?.templateRef || null;\n  });\n\n  commonLabelTpl = computed(() => {\n    return this.labelTpls().find(tpl => !tpl.position())?.templateRef || null;\n  });\n}\n\n"],
  "mappings": "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",
  "names": []
}
