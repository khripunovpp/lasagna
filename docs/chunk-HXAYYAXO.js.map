{
  "version": 3,
  "sources": ["src/app/shared/view/ui/grouping-tiles/grouping-tile.directive.ts", "src/app/shared/view/ui/selectable-section.component.ts", "src/app/shared/view/ui/grouping-tiles/grouping-header.directive.ts", "src/app/shared/view/ui/grouping-tiles/grouping-tiles.component.ts", "src/app/shared/service/types/sorting.types.ts", "src/app/features/controls/form/upload.component.ts"],
  "sourcesContent": ["import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[lgGroupingTile]',\n  standalone: true\n})\nexport class GroupingTileDirective {\n  constructor(\n    public templateRef: TemplateRef<any>,\n  ) {\n  }\n}\n", "import {Component, ContentChildren, effect, input, Optional, output, QueryList, SkipSelf} from '@angular/core';\nimport {CardListItemDirective} from './card/card-list-item.directive';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {CheckboxComponent} from '../../../features/controls/form/chckbox.component';\nimport {ButtonComponent} from './button.component';\nimport {MatIcon} from '@angular/material/icon';\nimport {SelectionZoneService} from '../../service/services';\nimport {generateUuid} from '../../helpers/attribute.helper';\n\n@Component({\n  selector: 'lg-selectable-section',\n  standalone: true,\n  template: `\n    <section class=\"lg-selectable-section\">\n      @if (selectionZoneService.selectionMode() === 'selection') {\n        <lg-checkbox [size]=\"'medium'\"\n                     [formControl]=\"selected\"\n                     [value]=\"key()\"\n                     (onCheckboxChanged)=\"onChanges($event)\"></lg-checkbox>\n      }\n      <div class=\"lg-selectable-section__inner\">\n        <ng-content></ng-content>\n      </div>\n      @if (selectionZoneService.selectionMode() === 'selection') {\n        <lg-button [style]=\"'danger'\"\n                   [size]=\"'tiny'\"\n                   [icon]=\"true\"\n                   (click)=\"selectionZoneService.putDelete(key())\">\n          <mat-icon aria-hidden=\"false\"\n                    fontIcon=\"close\"></mat-icon>\n        </lg-button>\n      }\n    </section>\n  `,\n  styles: [\n    `\n\n      .lg-card-list {\n      }\n\n      .lg-checkbox {\n        --control-bg: #abc2ff;\n        --control-bg-selected: #abc2ff;\n      }\n\n      .lg-selectable-section {\n        display: flex;\n        gap: 8px;\n        align-items: center;\n      }\n\n    `\n  ],\n  imports: [\n    ReactiveFormsModule,\n    CheckboxComponent,\n    ButtonComponent,\n    MatIcon\n  ]\n})\nexport class SelectableSectionComponent {\n  constructor(\n    @Optional() @SkipSelf() public selectionZoneService: SelectionZoneService\n  ) {\n  }\n\n  key = input<string>(generateUuid());\n  @ContentChildren(CardListItemDirective) items!: QueryList<CardListItemDirective>;\n  selected = new FormControl()\n\n  effectMode = effect(() => {\n    if (this.selectionZoneService.selectionMode()) {\n      this.selected.reset();\n    }\n  });\n\n  effectSelectAll = effect(() => {\n    if (this.selectionZoneService.selectAll()) {\n      this.selected.setValue(true);\n    } else if (this.selectionZoneService.deselectAll()) {\n      this.selected.setValue(false);\n    }\n  })\n\n  onChanges(\n    event: boolean | string | null | undefined\n  ) {\n    this.selectionZoneService.putSelected([!!event, this.key()]);\n  }\n}\n", "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[lgGroupingHeader]',\n  standalone: true\n})\nexport class GroupingHeaderDirective {\n  constructor(public templateRef: TemplateRef<any>) {}\n} ", "import {afterNextRender, Component, computed, contentChild, input, Optional, signal} from '@angular/core';\nimport {SortResult} from '../../../service/types/sorting.types';\nimport {TitleComponent} from '../../layout/title.component';\nimport {GroupingTileDirective} from './grouping-tile.directive';\nimport {NgTemplateOutlet, ViewportScroller} from '@angular/common';\nimport {SelectableSectionComponent} from '../selectable-section.component';\nimport {SelectionZoneService} from '../../../service/services';\nimport {GroupingHeaderDirective} from './grouping-header.directive';\nimport {TranslateService} from '@ngx-translate/core';\nimport {MatIcon} from '@angular/material/icon';\nimport {Router} from '@angular/router';\nimport {injectFragment} from '../../../helpers';\n\n@Component({\n  selector: 'lg-grouping-tiles',\n  standalone: true,\n  template: `\n    <section class=\"grouping-tiles\">\n      @for (group of sortResult()?.groups; track group?.field; let i = $index) {\n        <section class=\"grouping-tiles__section\"\n                 [class.grouping-tiles__section--collapsed]=\"!collapsedStates()[i]\">\n          @let items = group.items;\n          <header class=\"grouping-tiles__header\"\n                  [attr.id]=\"'group-' + i\"\n                  (click)=\"onHeaderClick(i)\">\n            @if (groupingHeaderDirective()) {\n              <ng-container [ngTemplateOutlet]=\"groupingHeaderDirective()?.templateRef\"\n                            [ngTemplateOutletContext]=\"{ $implicit: group?.field,items: items, collapsed: !collapsedStates()[i] }\">\n              </ng-container>\n            } @else {\n              <lg-title [level]=\"3\">\n                {{ group?.field || translateService.instant('without-category-label') }}\n              </lg-title>\n\n              <span class=\"grouping-tiles__header-count text-muted\">{{ items.length }}</span>\n            }\n\n            <mat-icon [fontIcon]=\"collapsedStates()[i] ? 'expand_more' : 'chevron_right'\"></mat-icon>\n          </header>\n          @if (groupingTileDirective()) {\n            <div class=\"grouping-tiles__content\">\n              @for (tile of items; track tile) {\n                <div class=\"grouping-tiles__item\">\n                  @if (selectable()) {\n                    <lg-selectable-section [key]=\"tile.uuid\">\n                      <div class=\"grouping-tiles__item-inner\">\n                        <ng-container [ngTemplateOutlet]=\"groupingTileDirective()?.templateRef\"\n                                      [ngTemplateOutletContext]=\"{ $implicit: tile }\">\n                        </ng-container>\n                      </div>\n                    </lg-selectable-section>\n                  } @else {\n                    <div class=\"grouping-tiles__item-inner\">\n                      <ng-container [ngTemplateOutlet]=\"groupingTileDirective()?.templateRef\"\n                                    [ngTemplateOutletContext]=\"{ $implicit: tile }\">\n                      </ng-container>\n                    </div>\n                  }\n                </div>\n              }\n            </div>\n          }\n        </section>\n      } @empty {\n        <ng-content select=\"[empty-state]\">\n        </ng-content>\n      }\n    </section>\n  `,\n  imports: [\n    TitleComponent,\n    NgTemplateOutlet,\n    SelectableSectionComponent,\n    MatIcon\n  ],\n  styles: [`\n    .grouping-tiles {\n      display: flex;\n      flex-direction: column;\n      gap: 32px;\n    }\n\n    .grouping-tiles__section {\n      display: flex;\n      flex-direction: column;\n      gap: 24px;\n    }\n\n    .grouping-tiles__section--collapsed .grouping-tiles__content {\n      display: none;\n    }\n\n    .grouping-tiles__header {\n      cursor: pointer;\n      display: flex;\n      align-items: flex-end;\n      justify-content: flex-start;\n      gap: 4px;\n    }\n\n    .grouping-tiles__header:hover {\n      text-decoration: underline;\n    }\n\n    .grouping-tiles__header-count {\n      flex-shrink: 0;\n      margin-left: 8px;\n      @media (max-width: 600px) {\n        margin-left: auto;\n      }\n    }\n\n    .grouping-tiles__header mat-icon {\n      flex: 0 0 auto;\n    }\n\n    .grouping-tiles__section--collapsed .grouping-tiles__header {\n\n    }\n\n    .grouping-tiles__content {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 16px;\n    }\n\n    .grouping-tiles__item {\n      display: flex;\n      align-items: stretch;\n    }\n\n    .grouping-tiles__item-inner {\n      display: flex;\n      align-items: stretch;\n      width: 100%;\n    }\n  `]\n})\nexport class GroupingTilesComponent {\n  constructor(\n    @Optional() public selectionZoneService: SelectionZoneService,\n    public translateService: TranslateService,\n    public router: Router,\n    public viewportScroller: ViewportScroller,\n  ) {\n    afterNextRender(() => {\n      const group = this.storedGroup()?.split('-')?.[1];\n      if (group == null) return;\n      this.collapsedStates.set({\n        [group]: true\n      });\n      this.viewportScroller.setOffset([0, 100]);\n\n      setTimeout(() => {\n        this.viewportScroller.scrollToAnchor(this.storedGroup()!, {\n          behavior: 'smooth'\n        });\n      }, 200);\n    })\n  }\n\n  readonly storedGroup = injectFragment();\n  sortResult = input<SortResult<any>>();\n  selectable = input<boolean>(false);\n  readonly empty = computed(() => {\n    return !this.sortResult()?.groups.length;\n  });\n  readonly collapsedStates = signal<Record<number, boolean>>({});\n  readonly groupingTileDirective = contentChild(GroupingTileDirective);\n  readonly groupingHeaderDirective = contentChild(GroupingHeaderDirective);\n\n  onHeaderClick(index: number) {\n    this.collapsedStates.update(state => {\n      state[index] = !state[index];\n      return state;\n    });\n\n    this.router.navigate([], {\n      fragment: `group-${index}`,\n      queryParamsHandling: 'merge',\n      replaceUrl: true,\n    });\n  }\n}\n", "export interface SortStrategy<T> {\n  groupBy(item: T): string | string[]\n\n  innerSort?(a: T, b: T, direction: 'asc' | 'desc', field: string): number\n\n  groupingSort?(a: string, b: string, direction: 'asc' | 'desc'): number\n\n  fieldTransform?: (field: string) => Promise<string> | string;\n}\n\nexport interface SortResultGroup<T> {\n  field: string;\n  items: T[];\n}\n\nexport class SortResult<T> {\n  constructor(\n    public groups: SortResultGroup<T>[],\n  ) {\n  }\n\n  get length() {\n    return this.groups.reduce((acc, group) => acc + group.items.length, 0);\n  }\n}\n", "import {Component, ElementRef, input, output, viewChild} from '@angular/core';\n\n@Component({\n  selector: 'lg-upload',\n  standalone: true,\n  template: `\n      <div (click)=\"input.click()\" class=\"lg-upload\">\n          <input #input\n                 (change)=\"onFileChange($event)\"\n                 [accept]=\"accept()\"\n                 type=\"file\">\n          <div class=\"lg-upload__content\">\n              <ng-content></ng-content>\n          </div>\n      </div>\n  `,\n  styles: [\n    `\n      input {\n        display: none;\n      }\n    `\n  ]\n})\nexport class UploadComponent {\n  filesSelected = output<File[]>();\n  accept = input<string>('.csv');\n  input = viewChild<ElementRef>('input');\n\n  onFileChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    const file = target.files?.[0];\n    if (file) {\n      this.filesSelected.emit([file]);\n    }\n  }\n\n  clear() {\n    if (!this.input()?.nativeElement) {\n      return\n    }\n    this.input()!.nativeElement.value = '';\n    this.input()!.nativeElement.files = null;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
