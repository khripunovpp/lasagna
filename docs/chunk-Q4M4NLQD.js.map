{
  "version": 3,
  "sources": ["src/app/shared/helpers/strings.helper.ts", "src/app/shared/helpers/color.helper.ts"],
  "sourcesContent": ["// remove except letters in all cases numbers - : ( ) spaces\nexport const removeAllNonLetters = (str: string) => {\n  return str.replace(/[^a-zA-Zа-яА-ЯёЁ0-9\\s-:()]/g, '');\n}\n\nexport const removeAllNonMathSymbols = (str: string) => {\n  return String(str || '').replace(/[^0-9%.,+-\\/*]/g, '')\n    .replace(',', '.')\n    .replace(/(\\.\\d{3})\\d+/g, '$1');\n}\n\nexport const toString = (value: any) => {\n  return String(value || '').trim();\n}\n", "import {removeAllNonLetters} from './strings.helper';\n\nexport const randomRGB = () => {\n  return `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)},1)`;\n}\n\nexport const stringToColor = (str: string): string => {\n  let hash = 0;\n\n  const boundariesByChannelA = [\n    [100, 130],\n    [100, 255],\n    [100, 190]\n  ];\n\n  const boundariesByChannelB = [\n    [0, 255],\n    [90, 255],\n    [60, 255]\n  ];\n\n  // Выбираем границы для каждого канала в зависимости от длины строки\n  const boundariesByChannel = str.length % 2 === 0\n  && str.charCodeAt(0) % 2 === 0 ? boundariesByChannelA\n    : boundariesByChannelB;\n\n  // Хешируем строку\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xFF;\n\n    // Масштабируем значение в допустимый диапазон\n    value = Math.floor((value / 255) * (boundariesByChannel[i][1] - boundariesByChannel[i][0]) + boundariesByChannel[i][0]);\n    color += value.toString(16).padStart(2, '0');\n  }\n\n  return color;\n};\n\n\nexport const isColorString = (str: string) => {\n  const s = new Option().style;\n  s.color = str;\n  return s.color !== '';\n}\n\n\nexport const estimateColor = (\n  name: string\n) => {\n  const clearedName = removeAllNonLetters(name);\n  if (clearedName.length > 0) {\n    return stringToColor(clearedName);\n  }\n  return randomRGB();\n}\n"],
  "mappings": ";AACO,IAAM,sBAAsB,CAAC,QAAe;AACjD,SAAO,IAAI,QAAQ,+BAA+B,EAAE;AACtD;AAEO,IAAM,0BAA0B,CAAC,QAAe;AACrD,SAAO,OAAO,OAAO,EAAE,EAAE,QAAQ,mBAAmB,EAAE,EACnD,QAAQ,KAAK,GAAG,EAChB,QAAQ,iBAAiB,IAAI;AAClC;AAEO,IAAM,WAAW,CAAC,UAAc;AACrC,SAAO,OAAO,SAAS,EAAE,EAAE,KAAI;AACjC;;;ACXO,IAAM,YAAY,MAAK;AAC5B,SAAO,QAAQ,KAAK,MAAM,KAAK,OAAM,IAAK,GAAG,CAAC,KAAK,KAAK,MAAM,KAAK,OAAM,IAAK,GAAG,CAAC,KAAK,KAAK,MAAM,KAAK,OAAM,IAAK,GAAG,CAAC;AACxH;AAEO,IAAM,gBAAgB,CAAC,QAAuB;AACnD,MAAI,OAAO;AAEX,QAAM,uBAAuB;IAC3B,CAAC,KAAK,GAAG;IACT,CAAC,KAAK,GAAG;IACT,CAAC,KAAK,GAAG;;AAGX,QAAM,uBAAuB;IAC3B,CAAC,GAAG,GAAG;IACP,CAAC,IAAI,GAAG;IACR,CAAC,IAAI,GAAG;;AAIV,QAAM,sBAAsB,IAAI,SAAS,MAAM,KAC5C,IAAI,WAAW,CAAC,IAAI,MAAM,IAAI,uBAC7B;AAGJ,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,WAAO,IAAI,WAAW,CAAC,MAAM,QAAQ,KAAK;AAC1C,WAAO,OAAO;EAChB;AAEA,MAAI,QAAQ;AACZ,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,QAAI,QAAS,QAAS,IAAI,IAAM;AAGhC,YAAQ,KAAK,MAAO,QAAQ,OAAQ,oBAAoB,CAAC,EAAE,CAAC,IAAI,oBAAoB,CAAC,EAAE,CAAC,KAAK,oBAAoB,CAAC,EAAE,CAAC,CAAC;AACtH,aAAS,MAAM,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;EAC7C;AAEA,SAAO;AACT;AAGO,IAAM,gBAAgB,CAAC,QAAe;AAC3C,QAAM,IAAI,IAAI,OAAM,EAAG;AACvB,IAAE,QAAQ;AACV,SAAO,EAAE,UAAU;AACrB;AAGO,IAAM,gBAAgB,CAC3B,SACE;AACF,QAAM,cAAc,oBAAoB,IAAI;AAC5C,MAAI,YAAY,SAAS,GAAG;AAC1B,WAAO,cAAc,WAAW;EAClC;AACA,SAAO,UAAS;AAClB;",
  "names": []
}
