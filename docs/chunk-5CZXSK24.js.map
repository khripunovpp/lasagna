{
  "version": 3,
  "sources": ["src/app/features/documentation/service/docs-loader.service.ts"],
  "sourcesContent": ["// shared-doc-loader.service.ts\nimport {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {firstValueFrom} from 'rxjs';\nimport {DexieIndexDbService} from '../../../shared/service/db/dexie-index-db.service';\nimport {Stores} from '../../../shared/service/db/const/stores';\n\nexport interface DocFile {\n  type: 'file';\n  name: string;\n  path: string;\n  title: string;\n  html: string;\n  language?: string;\n  order?: number;\n}\n\nexport interface TreeNode {\n  type: 'folder' | 'file';\n  name: string;\n  path?: string;\n  title?: string;\n  language?: string;\n  children?: TreeNode[];\n  _expanded?: boolean;\n  order?: number;\n}\n\ninterface MetaInfo {\n  updatedAt: string;\n}\n\n@Injectable({providedIn: 'root'})\nexport class SharedDocLoaderService {\n  constructor(\n    private _http: HttpClient,\n    private _indexedDB: DexieIndexDbService\n  ) {\n  }\n\n  async load(\n    sourcePath: string,\n    storeKey: Stores\n  ): Promise<{ docs: DocFile[]; tree: TreeNode[] }> {\n    const remoteMeta = await firstValueFrom(\n      this._http.get<MetaInfo>(`${sourcePath}/meta.json`)\n    );\n    const localData = await this._indexedDB.getAll(storeKey);\n    const localMeta = localData?.find((item: any) => item.key === 'meta')?.value;\n\n    const needsUpdate = !localMeta || new Date(remoteMeta.updatedAt) > new Date(localMeta.updatedAt);\n\n    if (needsUpdate) {\n      const [data, tree]: [DocFile[], TreeNode[]] = await Promise.all([\n        firstValueFrom(this._http.get<DocFile[]>(`${sourcePath}/data.json`)),\n        firstValueFrom(this._http.get<TreeNode[]>(`${sourcePath}/tree.json`)),\n      ]);\n\n      await this._indexedDB.balkAdd(storeKey, [\n        {key: 'meta', value: remoteMeta},\n        {key: 'data', value: data},\n        {key: 'tree', value: tree},\n      ]);\n\n      return {docs: data, tree};\n    } else {\n      const docs = localData?.find((item: any) => item.key === 'data')?.value || [];\n      const tree = localData?.find((item: any) => item.key === 'tree')?.value || [];\n      return {docs, tree};\n    }\n  }\n\n  filterLanguage(node: TreeNode, lang: string): TreeNode | null {\n    if (node.language && node.language !== lang) {\n      return null;\n    }\n    if (node.type === 'file') {\n      return node;\n    }\n\n    const filteredChildren: TreeNode[] = (node.children || []).reduce((acc: TreeNode[], child: TreeNode) => {\n      const filteredChild = this.filterLanguage(child, lang);\n      if (filteredChild) {\n        acc.push(filteredChild);\n      }\n      return acc;\n    }, []);\n\n    if (filteredChildren.length > 0) {\n      return {\n        ...node,\n        children: filteredChildren.sort((a, b) => (a.order || 0) - (b.order || 0)),\n      };\n    }\n\n    return null;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAiCM,IAAO,yBAAP,MAAO,wBAAsB;EAEvB;EACA;EAFV,YACU,OACA,YAA+B;AAD/B,SAAA,QAAA;AACA,SAAA,aAAA;EAEV;EAEA,MAAM,KACJ,YACA,UAAgB;AAEhB,UAAM,aAAa,MAAM,eACvB,KAAK,MAAM,IAAc,GAAG,UAAU,YAAY,CAAC;AAErD,UAAM,YAAY,MAAM,KAAK,WAAW,OAAO,QAAQ;AACvD,UAAM,YAAY,WAAW,KAAK,CAAC,SAAc,KAAK,QAAQ,MAAM,GAAG;AAEvE,UAAM,cAAc,CAAC,aAAa,IAAI,KAAK,WAAW,SAAS,IAAI,IAAI,KAAK,UAAU,SAAS;AAE/F,QAAI,aAAa;AACf,YAAM,CAAC,MAAM,IAAI,IAA6B,MAAM,QAAQ,IAAI;QAC9D,eAAe,KAAK,MAAM,IAAe,GAAG,UAAU,YAAY,CAAC;QACnE,eAAe,KAAK,MAAM,IAAgB,GAAG,UAAU,YAAY,CAAC;OACrE;AAED,YAAM,KAAK,WAAW,QAAQ,UAAU;QACtC,EAAC,KAAK,QAAQ,OAAO,WAAU;QAC/B,EAAC,KAAK,QAAQ,OAAO,KAAI;QACzB,EAAC,KAAK,QAAQ,OAAO,KAAI;OAC1B;AAED,aAAO,EAAC,MAAM,MAAM,KAAI;IAC1B,OAAO;AACL,YAAM,OAAO,WAAW,KAAK,CAAC,SAAc,KAAK,QAAQ,MAAM,GAAG,SAAS,CAAA;AAC3E,YAAM,OAAO,WAAW,KAAK,CAAC,SAAc,KAAK,QAAQ,MAAM,GAAG,SAAS,CAAA;AAC3E,aAAO,EAAC,MAAM,KAAI;IACpB;EACF;EAEA,eAAe,MAAgB,MAAY;AACzC,QAAI,KAAK,YAAY,KAAK,aAAa,MAAM;AAC3C,aAAO;IACT;AACA,QAAI,KAAK,SAAS,QAAQ;AACxB,aAAO;IACT;AAEA,UAAM,oBAAgC,KAAK,YAAY,CAAA,GAAI,OAAO,CAAC,KAAiB,UAAmB;AACrG,YAAM,gBAAgB,KAAK,eAAe,OAAO,IAAI;AACrD,UAAI,eAAe;AACjB,YAAI,KAAK,aAAa;MACxB;AACA,aAAO;IACT,GAAG,CAAA,CAAE;AAEL,QAAI,iBAAiB,SAAS,GAAG;AAC/B,aAAO,iCACF,OADE;QAEL,UAAU,iBAAiB,KAAK,CAAC,GAAG,OAAO,EAAE,SAAS,MAAM,EAAE,SAAS,EAAE;;IAE7E;AAEA,WAAO;EACT;;qCA/DW,yBAAsB,mBAAA,UAAA,GAAA,mBAAA,mBAAA,CAAA;EAAA;4EAAtB,yBAAsB,SAAtB,wBAAsB,WAAA,YADV,OAAM,CAAA;;;sEAClB,wBAAsB,CAAA;UADlC;WAAW,EAAC,YAAY,OAAM,CAAC;;;",
  "names": []
}
