import{d as m,z as h}from"./chunk-RFFWLM6I.js";import{U as f,Y as l,g as d,p as a}from"./chunk-MV5CNZ6J.js";import{f as c}from"./chunk-2WH2EVR6.js";var D=class r{constructor(t,o){this._http=t;this._indexedDB=o}docs$=new d([]);tree$=new d([]);init(){return c(this,null,function*(){let t=yield a(this._http.get("./docs/meta.json")),n=(yield this._indexedDB.getAll("documentation"))?.find(e=>e.key==="meta")?.value,p=!n||new Date(t.updatedAt)>new Date(n.updatedAt);if(console.warn({localMeta:n,remoteMeta:t,needsUpdate:p}),p){let[e,i]=yield Promise.all([a(this._http.get("./docs/data.json")),a(this._http.get("./docs/tree.json"))]);yield this._indexedDB.balkAdd("documentation",[{key:"meta",value:t},{key:"data",value:e},{key:"tree",value:i}]),this.docs$.next(e),this.tree$.next(i)}else{let e=yield this._indexedDB.getAll("documentation"),i=e?.find(s=>s.key==="tree")?.value,v=e?.find(s=>s.key==="data")?.value;this.tree$.next(i),this.docs$.next(v)}})}getDocs(){return this.docs$.asObservable()}getTree(){return this.tree$.asObservable()}getDocByPath(t){return c(this,null,function*(){})}static \u0275fac=function(o){return new(o||r)(l(m),l(h))};static \u0275prov=f({token:r,factory:r.\u0275fac,providedIn:"root"})};export{D as a};
