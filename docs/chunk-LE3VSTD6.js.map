{
  "version": 3,
  "sources": ["src/app/shared/service/services/grouping-sorting.service.ts"],
  "sourcesContent": ["import {Injectable} from '@angular/core';\nimport {SortResult, SortResultGroup, SortStrategy} from '../types/sorting.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GroupSortService {\n  async groupItems<T>(\n    items: T[],\n    strategy: SortStrategy<T>,\n    direction: 'asc' | 'desc' = 'asc',\n    field: string = 'name',\n  ): Promise<SortResult<T>> {\n    const groupsMap = new Map<string, T[]>();\n\n    const checkFn = (key: string, item: T) => {\n      if (!groupsMap.has(key)) {\n        groupsMap.set(key, []);\n      }\n      groupsMap.get(key)!.push(item);\n    }\n\n    for (const item of items) {\n      const key = strategy.groupBy(item);\n      // could be array, string, number, etc.\n      if (Array.isArray(key)) {\n        for (const subKey of key) {\n          checkFn(subKey, item);\n        }\n      } else {\n        checkFn(key, item);\n      }\n    }\n\n    const result: SortResultGroup<T>[] = [];\n\n    for (const [name, groupItems] of groupsMap.entries()) {\n      let sortedItems: T[] = groupItems;\n      if (strategy.innerSort) {\n        sortedItems = groupItems.toSorted((a, b) => {\n          return strategy.innerSort?.(a, b, direction, field) || 0;\n        });\n      }\n\n      const fieldName = strategy?.fieldTransform ? await strategy.fieldTransform(name) : name;\n      result.push({field: fieldName, items: sortedItems});\n    }\n\n    return new SortResult(result.toSorted((a, b) => {\n      // compare field key, but if one of this is empty, put it at the end\n      if (strategy.groupingSort) {\n        return strategy.groupingSort(a.field, b.field, direction);\n      }\n      if (a.field === '' && b.field !== '') {\n        return 1;\n      } else if (b.field === '' && a.field !== '') {\n        return -1;\n      }\n      return a.field.localeCompare(b.field);\n    }));\n  }\n}\n"],
  "mappings": ";;;;;;;;;;AAMM,IAAO,mBAAP,MAAO,kBAAgB;EAC3B,MAAM,WACJ,OACA,UACA,YAA4B,OAC5B,QAAgB,QAAM;AAEtB,UAAM,YAAY,oBAAI,IAAG;AAEzB,UAAM,UAAU,CAAC,KAAa,SAAW;AACvC,UAAI,CAAC,UAAU,IAAI,GAAG,GAAG;AACvB,kBAAU,IAAI,KAAK,CAAA,CAAE;MACvB;AACA,gBAAU,IAAI,GAAG,EAAG,KAAK,IAAI;IAC/B;AAEA,eAAW,QAAQ,OAAO;AACxB,YAAM,MAAM,SAAS,QAAQ,IAAI;AAEjC,UAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,mBAAW,UAAU,KAAK;AACxB,kBAAQ,QAAQ,IAAI;QACtB;MACF,OAAO;AACL,gBAAQ,KAAK,IAAI;MACnB;IACF;AAEA,UAAM,SAA+B,CAAA;AAErC,eAAW,CAAC,MAAM,UAAU,KAAK,UAAU,QAAO,GAAI;AACpD,UAAI,cAAmB;AACvB,UAAI,SAAS,WAAW;AACtB,sBAAc,WAAW,SAAS,CAAC,GAAG,MAAK;AACzC,iBAAO,SAAS,YAAY,GAAG,GAAG,WAAW,KAAK,KAAK;QACzD,CAAC;MACH;AAEA,YAAM,YAAY,UAAU,iBAAiB,MAAM,SAAS,eAAe,IAAI,IAAI;AACnF,aAAO,KAAK,EAAC,OAAO,WAAW,OAAO,YAAW,CAAC;IACpD;AAEA,WAAO,IAAI,WAAW,OAAO,SAAS,CAAC,GAAG,MAAK;AAE7C,UAAI,SAAS,cAAc;AACzB,eAAO,SAAS,aAAa,EAAE,OAAO,EAAE,OAAO,SAAS;MAC1D;AACA,UAAI,EAAE,UAAU,MAAM,EAAE,UAAU,IAAI;AACpC,eAAO;MACT,WAAW,EAAE,UAAU,MAAM,EAAE,UAAU,IAAI;AAC3C,eAAO;MACT;AACA,aAAO,EAAE,MAAM,cAAc,EAAE,KAAK;IACtC,CAAC,CAAC;EACJ;;qCAtDW,mBAAgB;EAAA;4EAAhB,mBAAgB,SAAhB,kBAAgB,WAAA,YAFf,OAAM,CAAA;;;sEAEP,kBAAgB,CAAA;UAH5B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
