{
  "version": 3,
  "sources": ["src/app/shared/view/directives/self-center.directive.ts", "src/app/features/settings/service/models/Tax.ts", "src/app/features/settings/service/repositories/taxes.repository.ts", "src/app/features/settings/view/finance-settings/taxes/taxes-settings.component.ts"],
  "sourcesContent": ["import {Directive, HostBinding} from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[lgSelfCenter]',\n})\nexport class SelfCenterDirective {\n  constructor() {\n  }\n\n  @HostBinding('style.align-self') selfAlign = 'center';\n}\n", "import {TaxDTO} from '../schemes/Tax.scheme';\n\nexport class Tax {\n  constructor(\n    props: {\n      name: string\n      amount: number | string\n      percentage: boolean\n      description?: string\n      items?: string[]\n      uuid?: string\n    }\n  ) {\n    this.name = String(props.name).trim();\n    this.amount = parseFloat(String(props.amount));\n    this.percentage = props.percentage;\n    this.description = String(props.description || '').trim();\n    this.items = props.items;\n    this.uuid = props.uuid;\n  }\n\n  name: string;\n  amount: number;\n  percentage: boolean;\n  description?: string;\n  items?: string[];\n  uuid?: string;\n\n  static fromRaw(dto: any) {\n    return new Tax({\n      name: dto?.name || '',\n      amount: dto?.amount || 0,\n      percentage: dto?.percentage || false,\n      description: dto?.description || '',\n      items: dto?.items || [],\n      uuid: dto?.uuid || '',\n    });\n  }\n\n  static empty() {\n    return new Tax({\n      name: '',\n      amount: 0,\n      percentage: true,\n      description: '',\n      items: [],\n      uuid: '',\n    });\n  }\n\n  update(\n    dto: any,\n  ) {\n    this.name = dto.name || this.name;\n    this.amount = dto.amount || this.amount;\n    this.percentage = dto.percentage || this.percentage;\n    this.description = dto.description || this.description;\n    this.items = dto.items || this.items;\n    this.uuid = dto.uuid || this.uuid;\n    return this;\n  }\n\n  toDTO(): TaxDTO {\n    return {\n      name: this.name || '',\n      amount: this.amount || 0,\n      percentage: this.percentage || false,\n      description: this.description || '',\n      items: this.items || [],\n      uuid: this.uuid || '',\n    };\n  }\n}\n", "import {Injectable} from '@angular/core';\nimport {DexieIndexDbService} from '../../../../shared/service/db/dexie-index-db.service';\nimport {Stores} from '../../../../shared/service/db/const/stores';\nimport {Tax} from '../models/Tax';\nimport {TaxDTO} from '../schemes/Tax.scheme';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaxesRepository {\n  constructor(\n    public _indexDbService: DexieIndexDbService,\n  ) {\n  }\n\n  addOne(\n    tax: Tax\n  ) {\n    return this._indexDbService.addData(Stores.TAXES, tax.toDTO())\n  }\n\n  updateOne(\n    uuid: string,\n    tax: Tax\n  ) {\n    return this._indexDbService.replaceData(Stores.TAXES, uuid, tax.toDTO());\n  }\n\n  async getOne(\n    uuid: Tax | string | undefined,\n  ) {\n    return new Promise<Tax | undefined>(async (resolve, reject) => {\n      uuid = typeof uuid === 'string' ? uuid : (uuid as Tax).uuid;\n      if (!uuid) {\n        resolve(undefined);\n        return;\n      }\n      await this._indexDbService.getOne(Stores.TAXES, uuid).then((result: TaxDTO) => {\n        resolve(Tax.fromRaw(result));\n      });\n    });\n  }\n\n  getAll() {\n    return this._indexDbService.getAll<TaxDTO>(Stores.TAXES)\n      .then((taxes: TaxDTO[]) => taxes.map((tax) => Tax.fromRaw(tax)))\n  }\n\n  addMany(\n    taxes: Tax[]\n  ) {\n    return this._indexDbService.balkAdd(Stores.TAXES, taxes.map((tax) => tax.toDTO()), false);\n  }\n\n  deleteOne(\n    uuid: string\n  ) {\n    return this._indexDbService.remove(Stores.TAXES, uuid);\n  }\n}\n", "import {Component, computed, effect, signal} from '@angular/core';\nimport {GapColumnComponent} from '../../../../../shared/view/ui/layout/gap-column.component';\n\nimport {FormArray, FormControl, FormGroup, FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport {GapRowComponent} from '../../../../../shared/view/ui/layout/gap-row.component';\n\nimport {InputComponent} from '../../../../../shared/view/ui/form/input.component';\nimport {TextareaComponent} from '../../../../../shared/view/ui/form/textarea.component';\nimport {CheckboxComponent} from '../../../../../shared/view/ui/form/chckbox.component';\nimport {NumberInputComponent} from '../../../../../shared/view/ui/form/number-input.component';\nimport {ButtonComponent} from '../../../../../shared/view/ui/layout/button.component';\nimport {SelfCenterDirective} from '../../../../../shared/view/directives/self-center.directive';\nimport {ShrinkDirective} from '../../../../../shared/view/directives/shrink.directive';\n\nimport {MatIcon} from '@angular/material/icon';\nimport {ParseMathDirective} from '../../../../../shared/view/directives/parse-math.directive';\nimport {WidthDirective} from '../../../../../shared/view/directives/width.directive';\nimport {TaxesRepository} from '../../../service/repositories/taxes.repository';\nimport {NotificationsService} from '../../../../../shared/service/services';\nimport {Tax} from '../../../service/models/Tax';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {errorHandler, taxDTOFromFormValue} from '../../../../../shared/helpers';\n\n@Component({\n  selector: 'lg-taxes-settings',\n  standalone: true,\n  template: `\n      <lg-gap-column>\n          <ng-container [formGroup]=\"taxesForm\">\n              <ng-container formArrayName=\"rows\">\n                  @for (taxRow of taxes();track (taxRow.name + taxRow.uuid);let i = $index, odd = $odd) {\n\n                      @let tacControl = taxesForm.controls.rows.controls[i];\n                      <section class=\"taxes\" [formGroupName]=\"i\">\n                          <div class=\"taxes__row\"\n                               [class.taxes__row--odd]=\"odd\">\n                              <lg-gap-row [top]=\"true\" [fit]=\"true\">\n                                  <lg-input\n                                          formControlName=\"name\"\n                                          lgWidth=\"35%\"\n                                          [placeholder]=\"'Name'\"></lg-input>\n\n                                  <lg-textarea [rows]=\"3\"\n                                               lgWidth=\"35%\"\n                                               formControlName=\"description\"\n                                               [placeholder]=\"'Description'\"></lg-textarea>\n\n                                  <lg-checkbox\n                                          (onCheckboxChanged)=\"onTaxValueChange(i)\"\n                                          [customMark]=\"'%'\"\n                                          lgShrink\n                                          formControlName=\"percentage\"></lg-checkbox>\n\n                                  <lg-number-input\n                                          lgParseMath\n                                          (onInputChange)=\"onTaxValueChange(i)\"\n                                          formControlName=\"value\"\n                                          [placeholder]=\"'Value'\"></lg-number-input>\n\n                                  <lg-button [style]=\"'danger'\"\n                                             lgShrink\n                                             [size]=\"'tiny'\"\n                                             [icon]=\"true\"\n                                             (click)=\"deleteTxRow(i)\">\n                                      <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\"\n                                                fontIcon=\"close\"></mat-icon>\n                                  </lg-button>\n                              </lg-gap-row>\n                          </div>\n                      </section>\n                  }\n              </ng-container>\n          </ng-container>\n\n          <lg-gap-row>\n              <lg-button (click)=\"saveTaxes()\"\n                         [disabled]=\"!taxesForm.dirty\"\n                         [style]=\"'success'\"\n                         lgSelfCenter\n                         lgShrink>\n                  @if (taxesForm.dirty) {\n                      Save changes\n                  } @else {\n                      No changes\n                  }\n              </lg-button>\n\n              <lg-button (click)=\"addTaxRow()\"\n                         [style]=\"'warning'\"\n                         lgSelfCenter\n                         lgShrink>\n                  Add tax\n              </lg-button>\n          </lg-gap-row>\n      </lg-gap-column>\n  `,\n  styles: [``],\n  imports: [\n    GapRowComponent,\n    CheckboxComponent,\n    FormsModule,\n    ButtonComponent,\n    InputComponent,\n    MatIcon,\n    NumberInputComponent,\n    ParseMathDirective,\n    ReactiveFormsModule,\n    SelfCenterDirective,\n    ShrinkDirective,\n    TextareaComponent,\n    WidthDirective,\n    GapColumnComponent,\n    GapColumnComponent,\n    ReactiveFormsModule,\n    GapRowComponent,\n    InputComponent,\n    TextareaComponent,\n    CheckboxComponent,\n    NumberInputComponent,\n    ButtonComponent,\n    MatIcon,\n    SelfCenterDirective,\n    ShrinkDirective\n  ]\n})\nexport class TaxesSettingsComponent {\n  constructor(\n    private _taxesRepository: TaxesRepository,\n    private _notificationService: NotificationsService,\n  ) {\n  }\n\n  taxes = signal<Tax[]>([]);\n  rows = computed(() => this.taxes().map((tax) => Tax.fromRaw(tax)));\n\n  taxesForm = new FormGroup({\n    rows: new FormArray([\n      this._getRowGroup(),\n    ]),\n  });\n  rowsEffect = effect(() => {\n    this._rowsFormArray.clear();\n    this.rows().forEach((row, index) => {\n      this._rowsFormArray.push(this._getRowGroup(row));\n    });\n    this.taxesForm.updateValueAndValidity();\n    this.taxesForm.markAsPristine();\n  });\n\n  totalTaxes = signal(0);\n\n  formValues = this.taxesForm.valueChanges.pipe(\n    takeUntilDestroyed(),\n  );\n\n  private get _rowsFormArray(): FormArray {\n    return this.taxesForm.get('rows') as FormArray;\n  }\n\n  ngOnInit() {\n    this._taxesRepository.getAll().then((taxes) => {\n      this.taxes.set(taxes);\n    });\n  }\n\n  onTaxValueChange(\n    index: number,\n  ) {\n\n  }\n\n  deleteTxRow(index: number) {\n    const tax = this.taxesForm.value.rows?.[index]?.uuid;\n    this._rowsFormArray.removeAt(index);\n    this.taxesForm.markAsDirty();\n    if (tax) {\n      this._taxesRepository.deleteOne(tax);\n    }\n  }\n\n  addTaxRow() {\n    this._rowsFormArray.push(this._getRowGroup());\n    this.taxesForm.markAsDirty();\n  }\n\n  async saveTaxes() {\n    try {\n      const taxes = this.taxesForm.value.rows?.map((item) => Tax.fromRaw(taxDTOFromFormValue(item))) ?? [];\n      await this._taxesRepository\n        .addMany(taxes);\n      this._notificationService.success('Taxes saved successfully');\n      this.taxesForm.markAsPristine();\n    } catch (e) {\n      this._notificationService.error(errorHandler(e));\n    }\n  }\n\n\n  private _getRowGroup(\n    value?: Tax,\n  ): FormGroup {\n    return new FormGroup({\n      name: new FormControl(value?.name || ''),\n      description: new FormControl(value?.description || ''),\n      value: new FormControl(value?.amount || 0),\n      amount: new FormControl(0),\n      percentage: new FormControl(value?.percentage || false),\n      uuid: new FormControl(value?.uuid || ''),\n    });\n  }\n\n}\n"],
  "mappings": "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",
  "names": []
}
