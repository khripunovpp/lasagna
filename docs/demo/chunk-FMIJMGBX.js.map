{
  "version": 3,
  "sources": ["src/app/features/settings/view/categories/category-product/list/category-list.component.ts"],
  "sourcesContent": ["import {Component, OnInit, signal} from '@angular/core';\nimport {ButtonComponent} from '../../../../../../shared/view/ui/layout/button.component';\nimport {GapRowComponent} from '../../../../../../shared/view/ui/layout/gap-row.component';\nimport {MatIcon} from '@angular/material/icon';\nimport {ContainerComponent} from '../../../../../../shared/view/ui/layout/container/container.component';\nimport {TitleComponent} from '../../../../../../shared/view/ui/layout/title/title.component';\nimport {CardListComponent} from '../../../../../../shared/view/ui/card/card-list.component';\nimport {CardListItemDirective} from '../../../../../../shared/view/ui/card/card-list-item.directive';\nimport {FadeInComponent} from '../../../../../../shared/view/ui/fade-in.component';\nimport {CategoryProductsRepository} from '../../../../../../shared/service/repositories';\nimport {NotificationsService} from '../../../../../../shared/service/services';\nimport {CategoryProduct} from '../../../../service/models/CategoryProduct';\n\n@Component({\n  selector: 'lg-category-list',\n  standalone: true,\n  template: `\n      <lg-fade-in>\n          <lg-container>\n              <lg-gap-row [center]=\"true\">\n                  <lg-title>\n                      Products' categories\n                  </lg-title>\n\n                  <lg-button [flat]=\"true\"\n                             [link]=\"'/settings/categories/products/add'\"\n                             [size]=\"'small'\"\n                             [style]=\"'primary'\">\n                      Add\n                  </lg-button>\n              </lg-gap-row>\n\n              <lg-card-list>\n                  @for (category of categories();track $index;let i = $index) {\n                      <ng-template lgCardListItem>\n                          <lg-gap-row [center]=\"true\">\n                              <div class=\"expand\">\n                                  {{ category.name }}\n                              </div>\n                              <lg-button [style]=\"'primary'\"\n                                         [size]=\"'small'\"\n                                         [link]=\"'/settings/categories/products/edit/' + category.uuid\"\n                                         [flat]=\"true\">\n                                  Edit\n                              </lg-button>\n                              <lg-button [style]=\"'danger'\"\n                                         [size]=\"'tiny'\"\n                                         [icon]=\"true\"\n                                         (click)=\"deleteCategory(category)\">\n                                  <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\"\n                                            fontIcon=\"close\"></mat-icon>\n                              </lg-button>\n                          </lg-gap-row>\n                      </ng-template>\n                  }\n              </lg-card-list>\n          </lg-container>\n      </lg-fade-in>\n  `,\n  imports: [\n    GapRowComponent,\n    ButtonComponent,\n    MatIcon,\n    ContainerComponent,\n    TitleComponent,\n    CardListComponent,\n    CardListItemDirective,\n    FadeInComponent\n  ],\n  styles: [\n    `:host {\n      display: block;\n    }\n    `\n  ]\n})\nexport class CategoryListComponent\n  implements OnInit {\n  constructor(\n    public categoryRepository: CategoryProductsRepository,\n    private _notificationsService: NotificationsService,\n  ) {\n\n  }\n\n  categories = signal<CategoryProduct[]>([])\n\n  deleteCategory(\n    category: CategoryProduct,\n  ) {\n    if (!category.uuid) {\n      return Promise.resolve()\n    }\n    return this.categoryRepository.deleteOne(category.uuid).then(() => {\n      this.loadCategory();\n      this._notificationsService.success('Category deleted');\n    });\n  }\n\n  async ngOnInit() {\n    await this.loadCategory();\n  }\n\n  loadCategory() {\n    this.categoryRepository.getAll().then((categories) => {\n      const sorted = categories.toSorted((a: CategoryProduct, b: CategoryProduct) => a.name.localeCompare(b.name));\n      this.categories.set(sorted);\n    });\n  }\n\n}\n"],
  "mappings": "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",
  "names": []
}
