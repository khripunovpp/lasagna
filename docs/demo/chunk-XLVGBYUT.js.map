{
  "version": 3,
  "sources": ["src/app/shared/service/services/docs.service.ts"],
  "sourcesContent": ["// üìÅ src/app/services/docs.service.ts\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, firstValueFrom} from 'rxjs';\nimport {DexieIndexDbService} from '../db/dexie-index-db.service';\nimport {Stores} from '../db/const/stores';\n\nexport interface DocFile {\n  type: 'file';\n  name: string;\n  path: string;\n  title: string;\n  html: string;\n}\n\nexport interface TreeNode {\n  type: 'folder' | 'file';\n  name: string;\n  path?: string;\n  title?: string;\n  children?: TreeNode[];\n}\n\ninterface MetaInfo {\n  updatedAt: string;\n}\n\n\n@Injectable({providedIn: 'root'})\nexport class DocsService {\n  constructor(\n    private _http: HttpClient,\n    private _indexedDB: DexieIndexDbService,\n  ) {\n  }\n\n  private docs$ = new BehaviorSubject<DocFile[]>([]);\n  private tree$ = new BehaviorSubject<TreeNode[]>([]);\n\n  async init() {\n    const remoteMeta = await firstValueFrom(this._http.get<MetaInfo>('./docs/meta.json'));\n    const localData = await this._indexedDB.getAll(Stores.DOCUMENTATION);\n    const localMeta = localData?.find((item:any) => item.key === 'meta')?.value;\n\n    const needsUpdate = !localMeta || new Date(remoteMeta.updatedAt) > new Date(localMeta.updatedAt);\n\n    if (needsUpdate) {\n      const [data, tree]: [\n        DocFile[],\n        TreeNode[]\n      ] = await Promise.all([\n        firstValueFrom(this._http.get<DocFile[]>('./docs/data.json')),\n        firstValueFrom(this._http.get<TreeNode[]>('./docs/tree.json')),\n      ]);\n\n      await this._indexedDB.balkAdd(Stores.DOCUMENTATION, [\n        {\n          key: 'meta',\n          value: remoteMeta,\n        },\n        {\n          key: 'data',\n          value: data,\n        },\n        {\n          key: 'tree',\n          value: tree,\n        },\n      ]);\n\n      this.docs$.next(data);\n      this.tree$.next(tree);\n    } else {\n      const docsRecords = await this._indexedDB.getAll(Stores.DOCUMENTATION);\n\n      const tree = docsRecords?.find((item:any) => item.key === 'tree')?.value;\n      const docs = docsRecords?.find((item:any) => item.key === 'data')?.value;\n\n      this.tree$.next(tree);\n      this.docs$.next(docs);\n    }\n  }\n\n  getDocs() {\n    return this.docs$.asObservable();\n  }\n\n  getTree() {\n    return this.tree$.asObservable();\n  }\n\n  async getDocByPath(path: string) {\n    // return await this.db.docs.get(path);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AA6BM,IAAO,cAAP,MAAO,aAAW;EAEZ;EACA;EAFV,YACU,OACA,YAA+B;AAD/B,SAAA,QAAA;AACA,SAAA,aAAA;EAEV;EAEQ,QAAQ,IAAI,gBAA2B,CAAA,CAAE;EACzC,QAAQ,IAAI,gBAA4B,CAAA,CAAE;EAElD,MAAM,OAAI;AACR,UAAM,aAAa,MAAM,eAAe,KAAK,MAAM,IAAc,kBAAkB,CAAC;AACpF,UAAM,YAAY,MAAM,KAAK,WAAW,OAAO,OAAO,aAAa;AACnE,UAAM,YAAY,WAAW,KAAK,CAAC,SAAa,KAAK,QAAQ,MAAM,GAAG;AAEtE,UAAM,cAAc,CAAC,aAAa,IAAI,KAAK,WAAW,SAAS,IAAI,IAAI,KAAK,UAAU,SAAS;AAE/F,QAAI,aAAa;AACf,YAAM,CAAC,MAAM,IAAI,IAGb,MAAM,QAAQ,IAAI;QACpB,eAAe,KAAK,MAAM,IAAe,kBAAkB,CAAC;QAC5D,eAAe,KAAK,MAAM,IAAgB,kBAAkB,CAAC;OAC9D;AAED,YAAM,KAAK,WAAW,QAAQ,OAAO,eAAe;QAClD;UACE,KAAK;UACL,OAAO;;QAET;UACE,KAAK;UACL,OAAO;;QAET;UACE,KAAK;UACL,OAAO;;OAEV;AAED,WAAK,MAAM,KAAK,IAAI;AACpB,WAAK,MAAM,KAAK,IAAI;IACtB,OAAO;AACL,YAAM,cAAc,MAAM,KAAK,WAAW,OAAO,OAAO,aAAa;AAErE,YAAM,OAAO,aAAa,KAAK,CAAC,SAAa,KAAK,QAAQ,MAAM,GAAG;AACnE,YAAM,OAAO,aAAa,KAAK,CAAC,SAAa,KAAK,QAAQ,MAAM,GAAG;AAEnE,WAAK,MAAM,KAAK,IAAI;AACpB,WAAK,MAAM,KAAK,IAAI;IACtB;EACF;EAEA,UAAO;AACL,WAAO,KAAK,MAAM,aAAY;EAChC;EAEA,UAAO;AACL,WAAO,KAAK,MAAM,aAAY;EAChC;EAEA,MAAM,aAAa,MAAY;EAE/B;;qCAhEW,cAAW,mBAAA,UAAA,GAAA,mBAAA,mBAAA,CAAA;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YADC,OAAM,CAAA;;;sEAClB,aAAW,CAAA;UADvB;WAAW,EAAC,YAAY,OAAM,CAAC;;;",
  "names": []
}
