{
  "version": 3,
  "sources": ["src/app/features/settings/const/settings-keys.const.ts", "src/app/features/settings/service/models/Settings.ts", "src/app/features/settings/service/repositories/settings.repository.ts", "src/app/features/settings/service/services/settings.service.ts", "src/app/features/settings/service/types/credentials.types.ts", "src/app/features/settings/service/models/Credential.ts"],
  "sourcesContent": ["export enum SettingsKeysConst {\n  invoicePrefix = 'invoicePrefix',\n  invoiceLogo = 'invoiceLogo',\n  invoicePrecisionRows = 'invoicePrecisionRows',\n  invoicePrecisionTotals = 'invoicePrecisionTotals',\n  currency = 'currency',\n  lang = 'lang',\n}\n", "export interface SettingGroup<T> {\n  key: string\n  data: T\n}\n\nexport class Settings {\n  constructor(\n    settings?: any,\n  ) {\n    if (settings && Array.isArray(settings)) {\n\n    }\n  }\n\n  settings = new Map<string, SettingGroup<unknown>>();\n\n  static empty() {\n    return new Settings();\n  }\n\n  static fromRaw(dto: any) {\n    if (dto instanceof Settings) {\n      return dto;\n    }\n\n    const settings = new Settings();\n    if (Array.isArray(dto)) {\n      dto.forEach((setting: SettingGroup<unknown>) => {\n        settings.addSetting(setting.key, setting.data);\n      });\n    } else {\n      Object.entries(dto).forEach(([key, data]) => {\n        settings.addSetting(key, data);\n      });\n    }\n    return settings;\n  }\n\n  addSetting<T>(key: string, data: T) {\n    this.settings.set(key, {key, data});\n  }\n\n  getSetting<T>(key: string): SettingGroup<T> | undefined {\n    return this.settings.get(key) as SettingGroup<T>;\n  }\n\n  getAllSettings(): SettingGroup<unknown>[] {\n    return Array.from(this.settings.values());\n  }\n\n  getSettingsMap(): Record<string, any> {\n    return this.getAllSettings().reduce((acc, setting) => {\n      acc[setting.key] = setting.data\n      return acc;\n    }, {} as Record<string, any>);\n  }\n\n  removeSetting(key: string) {\n    this.settings.delete(key);\n  }\n\n  toDTO() {\n    return {\n      settings: Array.from(this.settings.values())\n    };\n  }\n\n}\n", "import {Injectable} from '@angular/core';\nimport {DexieIndexDbService} from '../../../../shared/service/db/dexie-index-db.service';\nimport {Stores} from '../../../../shared/service/db/const/stores';\nimport {Settings} from '../models/Settings';\nimport {SettingsDTO} from '../schemes/Settings.scheme';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsRepository {\n  constructor(\n    public _indexDbService: DexieIndexDbService,\n  ) {\n  }\n\n  async updateSettings(settings: Settings) {\n    await this._indexDbService.clear(Stores.SETTINGS);\n    return this._indexDbService.balkAdd(Stores.SETTINGS, settings.toDTO().settings);\n  }\n\n  getOne(key: string) {\n    return this._indexDbService.search(Stores.SETTINGS, 'key', key).then((settings) => {\n      if (settings) {\n        return settings[0] as SettingsDTO['settings']\n      } else {\n        return null;\n      }\n    })\n  }\n\n  getAll() {\n    return this._indexDbService.getAll(Stores.SETTINGS).then((settings) => {\n      return Settings.fromRaw(settings);\n    })\n  }\n}\n", "import {inject, Injectable, signal} from '@angular/core';\nimport {SettingsRepository} from '../repositories/settings.repository';\nimport {LanguageService} from './language.service';\nimport {Settings} from '../models/Settings';\nimport {SettingsKeysConst} from '../../const/settings-keys.const';\nimport {LoggerService} from '../../../logger/logger.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n  constructor(\n    private _settingsRepository: SettingsRepository,\n    private _localisationService: LanguageService,\n  ) {\n  }\n\n  settingsModel?: Settings;\n  settingsSignal = signal<Settings | undefined>(undefined);\n  private _logger = inject(LoggerService).withContext({\n    label: 'SettingsService',\n    color: '#4CAF50',\n  })\n\n  get lang() {\n    return this._localisationService.lang;\n  }\n\n  get languages(): string[] {\n    return this._localisationService.languages;\n\n  }\n\n  loadSettings() {\n    return this._settingsRepository.getAll().then((settings) => {\n      this.settingsModel = settings;\n      this.settingsSignal.set(settings);\n      this._logger.log('Settings loaded', settings);\n      return settings;\n    });\n  }\n\n  saveSettings() {\n    if (this.settingsModel) {\n      this.settingsSignal.set(this.settingsModel);\n      return this._settingsRepository.updateSettings(this.settingsModel).then(() => {\n        this._logger.log('Settings saved', this.settingsModel);\n      });\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  changeLang(lang: string) {\n    this._localisationService.changeLang(lang);\n    this.settingsModel?.addSetting(SettingsKeysConst.lang, lang);\n    this.saveSettings();\n  }\n\n  changeCurrency(currency: string) {\n    this.settingsModel?.addSetting(SettingsKeysConst.currency, currency);\n    this.saveSettings();\n  }\n\n  getInvoicePrefix(): string | undefined {\n    return this.settingsModel?.getSetting<string>(SettingsKeysConst.invoicePrefix)?.data;\n  }\n\n  setInvoicePrefix(\n    prefix: string\n  ) {\n    this.settingsModel?.addSetting(SettingsKeysConst.invoicePrefix, prefix);\n  }\n\n  getInvoiceLogo(): string | undefined {\n    return this.settingsModel?.getSetting<string>(SettingsKeysConst.invoiceLogo)?.data;\n  }\n\n  setInvoiceLogo(\n    logo: string | null\n  ) {\n    this.settingsModel?.addSetting(SettingsKeysConst.invoiceLogo, logo);\n  }\n\n  setInvoicePrecisions(\n    precisionRows: number | null,\n    precisionTotals: number | null\n  ) {\n    this.settingsModel?.addSetting(SettingsKeysConst.invoicePrecisionRows, precisionRows);\n    this.settingsModel?.addSetting(SettingsKeysConst.invoicePrecisionTotals, precisionTotals);\n  }\n\n  getInvoicePrecision(): [number, number] {\n    const precisionRows = this.settingsModel?.getSetting<number>(SettingsKeysConst.invoicePrecisionRows)?.data;\n    const precisionTotals = this.settingsModel?.getSetting<number>(SettingsKeysConst.invoicePrecisionTotals)?.data;\n\n    return [precisionRows ?? 2, precisionTotals ?? 2];\n  }\n}\n", "export enum CredentialsType {\n  customer = 'customer',\n  system = 'system',\n}\n", "import {CredentialDTO} from '../schemes/Credential.scheme';\nimport {toString} from '../../../../shared/helpers/strings.helper';\nimport {CredentialsType} from '../types/credentials.types';\n\nexport class Credential {\n  constructor(\n    dto?: Partial<any>,\n  ) {\n    this.update(dto || {});\n  }\n\n  type: CredentialsType = CredentialsType.customer;\n  name = '';\n  privateName = '';\n  country = '';\n  address = '';\n  taxId?: string;\n  phone = '';\n  email = '';\n  uuid?: string;\n\n  static fromRaw(dto: any) {\n    if (typeof dto === 'string') {\n      return new Credential({\n        uuid: dto,\n      });\n    }\n    return new Credential({\n      type: dto?.type || CredentialsType.customer,\n      name: dto?.name || '',\n      privateName: dto?.privateName || '',\n      country: dto?.country || '',\n      address: dto?.address || '',\n      taxId: dto?.taxId || '',\n      phone: dto?.phone || '',\n      email: dto?.email || '',\n      uuid: dto?.uuid || '',\n    });\n  }\n\n  static empty() {\n    return new Credential();\n  }\n\n  update(\n    dto: any,\n  ) {\n    this.uuid = toString(dto.uuid || this.uuid);\n    this.name = toString(dto.name || this.name);\n    this.privateName = toString(dto.privateName || this.privateName);\n    this.country = toString(dto.country || this.country);\n    this.address = toString(dto.address || this.address);\n    this.taxId = toString(dto.taxId || this.taxId);\n    this.phone = toString(dto.phone || this.phone);\n    this.email = toString(dto.email || this.email);\n    this.type = dto.type || this.type || CredentialsType.customer;\n    return this;\n  }\n\n  toDTO(): CredentialDTO {\n    return {\n      name: this.name || '',\n      privateName: this.privateName || '',\n      country: this.country || '',\n      address: this.address || '',\n      taxId: this.taxId || '',\n      phone: this.phone || '',\n      email: this.email || '',\n      uuid: this.uuid || '',\n      type: this.type,\n    };\n  }\n\n  toFormattedString() {\n    let string = '';\n    if (this.name) {\n      string += `\\n${this.name}`;\n    }\n    if (this.address) {\n      string += `\\n${this.address}`;\n    }\n    if (this.country) {\n      string += `, ${this.country}`;\n    }\n    if (this.phone) {\n      string += `\\n${this.phone}`;\n    }\n    if (this.email) {\n      string += `\\n${this.email}`;\n    }\n    if (this.taxId) {\n      string += `\\nTax ID: ${this.taxId}`;\n    }\n    return string;\n  }\n}\n"],
  "mappings": "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",
  "names": ["SettingsKeysConst", "CredentialsType"]
}
