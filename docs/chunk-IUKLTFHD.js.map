{
  "version": 3,
  "sources": ["src/app/features/recipes/view/list/draft-recipes-list.component.ts", "src/app/shared/view/ui/grouping-sorting/grouping-sorting.directive.ts", "src/app/shared/view/ui/grouping-sorting/grouping-sorting.component.ts", "src/app/shared/service/groupings/base-grouping.ts", "src/app/shared/service/groupings/recipes.grouping.ts", "src/app/features/recipes/service/providers/categorized-recipes-list.token.ts", "src/app/features/recipes/view/list/recipes-filters.component.ts", "src/app/features/recipes/view/list/recipes-list.component.ts"],
  "sourcesContent": ["import {Component, HostBinding, OnInit, signal} from '@angular/core';\nimport {RecipesRepository} from '../../../../shared/service/repositories';\nimport {DraftForm, NotificationsService, SelectionZoneService} from '../../../../shared/service/services';\nimport {RecipeDTO} from '../../service/schemes/Recipe.scheme';\nimport {ProductDTO} from '../../../products/service/Product.scheme';\nimport {Stores} from '../../../../shared/service/db/const/stores';\nimport {FlexRowComponent} from '../../../../shared/view/layout/flex-row.component';\nimport {ButtonComponent} from '../../../../shared/view/ui/button.component';\n\nimport {CardListComponent} from '../../../../shared/view/ui/card/card-list.component';\nimport {CardListItemDirective} from '../../../../shared/view/ui/card/card-list-item.directive';\nimport {RouterLink} from '@angular/router';\nimport {TimeAgoPipe} from '../../../../shared/view/pipes/time-ago.pipe';\nimport {ExpandDirective} from '../../../../shared/view/directives/expand.directive';\nimport {TranslatePipe} from '@ngx-translate/core';\nimport {ExpanderComponent} from '../../../../shared/view/ui/expander.component';\nimport {InlineSeparatedGroupComponent, InlineSeparatedGroupDirective} from '../../../../shared/view/ui/inline-separated-group.component';\n\n@Component({\n  selector: 'lg-draft-recipes-list',\n  standalone: true,\n  imports: [\n    FlexRowComponent,\n    ButtonComponent,\n    CardListComponent,\n    CardListItemDirective,\n    RouterLink,\n    TimeAgoPipe,\n    ExpandDirective,\n    TranslatePipe,\n    ExpanderComponent,\n    InlineSeparatedGroupComponent,\n    InlineSeparatedGroupDirective\n],\n  providers: [\n    SelectionZoneService,\n  ],\n  template: `\n    @if (drafts()?.length) {\n      <lg-expander [closeLabel]=\"'drafts-close-label'|translate\"\n                   [openLabel]=\"'drafts-label'|translate:{length:drafts()?.length}\">\n        <lg-inline-separated-group>\n          <ng-template lgInlineSeparatedGroup>\n            <lg-button (click)=\"selectionZoneService.onSelection()\"\n                       [flat]=\"true\"\n                       [size]=\"'small'\"\n                       [style]=\"'success'\">\n              {{ 'select-many-label'|translate }}\n            </lg-button>\n          </ng-template>\n\n          <ng-template lgInlineSeparatedGroup>\n            <lg-button [flat]=\"true\"\n                       [size]=\"'small'\"\n                       [style]=\"'danger'\"\n                       (click)=\"deleteAllDrafts()\">\n              {{ 'delete-all-label' | translate }}\n            </lg-button>\n          </ng-template>\n\n          @if (selectionZoneService.selected(); as selected) {\n            <ng-template lgInlineSeparatedGroup>\n              <lg-button [flat]=\"true\"\n                         [disabled]=\"!selected?.size\"\n                         [size]=\"'small'\"\n                         [style]=\"'danger'\"\n                         (click)=\"deletedSelectedDrafts()\">\n                {{ 'delete-selected-label' | translate }}\n              </lg-button>\n            </ng-template>\n          }\n        </lg-inline-separated-group>\n\n        <lg-card-list [mode]=\"selectionZoneService.selectionMode()\"\n                      (onDeleteOne)=\"deleteDraft($event?.uuid)\"\n                      (onSelected)=\"selectionZoneService.putSelected($event)\"\n                      [selectAll]=\"selectionZoneService.selectAll()\"\n                      [deselectAll]=\"selectionZoneService.deselectAll()\"\n                      style=\"--card-bg: var(--card-bg-draft)\">\n          @for (item of drafts(); track item.uuid) {\n            <ng-template lgCardListItem [uuid]=\"item.uuid\" type=\"draft\">\n              <lg-flex-row [center]=\"true\">\n                <a [routerLink]=\"'/recipes/draft/' + item?.uuid\" lgExpand>\n                  @if (item?.meta?.['uuid']) {\n                    {{ 'draft.list-prefix.existing'|translate }}\n                  } @else {\n                    {{ 'draft.list-prefix.new'|translate }}\n                  }\n                  {{ item?.data?.name ?? '' }}\n                </a>\n\n                <small class=\"text-muted text-cursive\">\n                  {{ 'edited-at-label'|translate }} {{ (item?.updatedAt || item?.createdAt) | timeAgo }}\n                </small>\n              </lg-flex-row>\n            </ng-template>\n          }\n        </lg-card-list>\n      </lg-expander>\n    }\n  `,\n})\n\nexport class DraftRecipesListComponent\n  implements OnInit {\n  constructor(\n    private _recipesRepository: RecipesRepository,\n    private _notificationsService: NotificationsService,\n    public selectionZoneService: SelectionZoneService,\n  ) {\n  }\n\n\n  drafts = signal<Array<DraftForm<RecipeDTO>>>([]);\n  protected readonly Stores = Stores;\n\n  @HostBinding('attr.hidden') get hidden() {\n    return this.drafts()?.length === 0 ? true : null;\n  }\n\n  ngOnInit() {\n    const draft = this._recipesRepository.getDraftRecipe();\n    if (draft) {\n      this.drafts.set(draft);\n    }\n  }\n\n  deleteAllDrafts() {\n    this._recipesRepository.removeDraftMany(this.drafts().map((item) => item.uuid)).then(() => {\n      this.drafts.set([]);\n      this._notificationsService.success('notifications.drafts.deleted');\n    })\n  }\n\n  deletedSelectedDrafts() {\n    const selected = this.selectionZoneService.selected();\n    if (!selected) return;\n    this._recipesRepository.removeDraftMany(Array.from(selected)).then(() => {\n      this.drafts.update((drafts) => {\n        return drafts.filter((item) => !selected.has(item.uuid));\n      });\n      this._notificationsService.success('notifications.drafts.deleted');\n    })\n  }\n\n  deleteDraft(\n    draftUUID?: string\n  ) {\n    if (!draftUUID) {\n      return;\n    }\n    this._recipesRepository.removeDraftRecipe(draftUUID);\n    this.drafts.update((drafts) => {\n      return drafts.filter((item) => item?.uuid !== draftUUID);\n    });\n  }\n}\n", "import {Component, Directive, effect, EventEmitter, Input, Output, signal, TemplateRef} from '@angular/core';\nimport {FlexRowComponent} from '../../layout/flex-row.component';\nimport {ButtonComponent} from '../button.component';\nimport {DropdownComponent} from '../../../../features/controls/dropdown/dropdown.component';\nimport {FlexColumnComponent} from '../../layout/flex-column.component';\n\n@Directive({\n  selector: '[lgGroupingSortingContainer]',\n  standalone: true,\n})\nexport class GroupingSortingContainerComponent {\n  constructor(\n    public templateRef: TemplateRef<any>,\n  ) {\n  }\n\n}\n", "import {Component, ContentChild, effect, EventEmitter, inject, Output, signal} from '@angular/core';\nimport {FlexRowComponent} from '../../layout/flex-row.component';\nimport {ButtonComponent} from '../button.component';\nimport {DropdownComponent} from '../../../../features/controls/dropdown/dropdown.component';\nimport {FlexColumnComponent} from '../../layout/flex-column.component';\nimport {GroupingSortingContainerComponent} from './grouping-sorting.directive';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {injectQueryParams} from '../../../helpers/route.helpers';\nimport {TranslatePipe, TranslateService} from '@ngx-translate/core';\n\n@Component({\n  selector: 'lg-grouping-sorting',\n  standalone: true,\n  imports: [\n    FlexRowComponent,\n    ButtonComponent,\n    DropdownComponent,\n    FlexColumnComponent,\n    TranslatePipe\n  ],\n  template: `\n    <lg-flex-row [mobileMode]=\"true\"\n                 size=\"medium\">\n      <lg-dropdown>\n        <lg-button [outlined]=\"true\"\n                   [size]=\"'small'\"\n                   [style]=\"'primary'\"\n                   lgDropdownAnchor>\n          {{ getGroupingLabel(sorting().group) }}\n        </lg-button>\n\n        <lg-flex-column [size]=\"'small'\">\n          <span>{{ 'grouping.title' | translate }}</span>\n\n          <lg-button (click)=\"onSortChange({group: 'category'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ groupingToLabel['category']  | translate }}\n          </lg-button>\n\n          <lg-button (click)=\"onSortChange({group: 'tag'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ groupingToLabel['tag']  | translate }}\n          </lg-button>\n\n          <lg-button (click)=\"onSortChange({group: 'createdAt'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ groupingToLabel['createdAt'] | translate }}\n          </lg-button>\n\n          <lg-button (click)=\"onSortChange({group: 'alphabetical'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ groupingToLabel['alphabetical'] | translate }}\n          </lg-button>\n        </lg-flex-column>\n      </lg-dropdown>\n\n      <!--      <lg-dropdown>-->\n      <!--        <lg-button [size]=\"'small'\" lgDropdownAnchor>-->\n      <!--          Sort by: {{ sorting().field }}-->\n      <!--        </lg-button>-->\n\n      <!--        <lg-gap-column [size]=\"'small'\">-->\n      <!--          <lg-button [size]=\"'small'\"-->\n      <!--                     (click)=\"onSortChange({field: 'name'})\"-->\n      <!--                     [style]=\"'warning'\"-->\n      <!--                     [flat]=\"true\">-->\n      <!--            Name-->\n      <!--          </lg-button>-->\n\n      <!--          <lg-button [size]=\"'small'\"-->\n      <!--                     (click)=\"onSortChange({field: 'createdAt'})\"-->\n      <!--                     [style]=\"'warning'\"-->\n      <!--                     [flat]=\"true\">-->\n      <!--            Date-->\n      <!--          </lg-button>-->\n      <!--        </lg-gap-column>-->\n      <!--      </lg-dropdown>-->\n\n      <lg-dropdown>\n        <lg-button [outlined]=\"true\"\n                   [size]=\"'small'\"\n                   [style]=\"'primary'\"\n                   lgDropdownAnchor>\n          {{ getGroupingDirectionLabel(sorting().direction) }}\n        </lg-button>\n\n        <lg-flex-column [size]=\"'small'\">\n          <span>{{ 'grouping.direction.title' | translate }}</span>\n\n          <lg-button (click)=\"onSortChange({direction: 'asc'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ groupingDirectionToLabel['asc'] | translate }}\n          </lg-button>\n\n          <lg-button (click)=\"onSortChange({direction: 'desc'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ groupingDirectionToLabel['desc']  | translate }}\n          </lg-button>\n        </lg-flex-column>\n      </lg-dropdown>\n    </lg-flex-row>\n  `\n})\nexport class GroupingSortingComponent {\n  constructor(\n    private translateService: TranslateService\n  ) {\n  }\n\n  readonly groupingToLabel:Record<string, string> = {\n    category: 'grouping.by-category',\n    tag: 'grouping.by-tag',\n    createdAt: 'grouping.by-creation-date',\n    alphabetical: 'grouping.by-first-letter'\n  };\n  readonly groupingDirectionToLabel:Record<string, string> = {\n    asc: 'grouping.direction.asc',\n    desc: 'grouping.direction.desc'\n  };\n  router = inject(Router);\n  aRouter = inject(ActivatedRoute);\n  @ContentChild(GroupingSortingContainerComponent) context!: GroupingSortingContainerComponent;\n\n  @Output() sortChange = new EventEmitter<{ field: string, direction: 'asc' | 'desc' | string }>();\n  @Output() groupChange = new EventEmitter<string>();\n\n  groupingParam = injectQueryParams('groupBy');\n  sortDirection = injectQueryParams<string | null>('sortDirection');\n  sortField = injectQueryParams('sortField');\n\n  defaultDirection = 'asc';\n  sorting = signal<{\n    field: string,\n    direction: 'asc' | 'desc' | string,\n    group: string\n  }>({field: 'name', direction: this.defaultDirection, group: 'category'});\n  sortingEffect = effect(() => {\n    const sort = this.sorting();\n    this.sortChange.emit(sort);\n  });\n\n  ngOnInit() {\n    const params = this.aRouter.snapshot.queryParams;\n    const groupBy = this.groupingParam();\n    const sortDirection = this.sortDirection();\n    const sortField = this.sortField();\n\n    this.sorting.set({\n      field: sortField?.toString() || 'name',\n      direction: sortDirection\n        ? sortDirection === 'asc' ? 'asc' : 'desc'\n        : this.defaultDirection,\n      group: groupBy?.toString() || 'category'\n    });\n  }\n\n  onSortChange(\n    props: {\n      field?: string\n      direction?: 'asc' | 'desc'\n      group?: string\n    }\n  ) {\n    this.sorting.set({\n      field: props.field || this.sorting().field,\n      direction: props.direction || this.sorting().direction,\n      group: props.group || this.sorting().group\n    });\n    this.sortChange.emit(this.sorting());\n\n    this.router.navigate([], {\n      queryParams: {\n        sortField: props.field || this.sorting().field,\n        sortDirection: props.direction || this.sorting().direction,\n        groupBy: props.group || this.sorting().group\n      },\n      relativeTo: this.aRouter,\n      queryParamsHandling: 'merge',\n    }).then(() => {\n      // update page\n      window.location.reload();\n    })\n  }\n\n  getGroupingLabel(group: string): string {\n    const key = this.groupingToLabel[group];\n    return key ? this.translateService.instant(key) : group;\n  }\n\n  getGroupingDirectionLabel(direction: string): string {\n    const key = this.groupingDirectionToLabel[direction];\n    return key ? this.translateService.instant(key) : direction;\n  }\n}\n", "import {SortStrategy} from '../types/sorting.types';\n\nexport class BaseGrouping<T = any>\n  implements SortStrategy<T> {\n  innerSort(\n    a: T,\n    b: T,\n    direction: 'asc' | 'desc' = 'asc'\n  ) {\n    if (direction === 'asc') {\n      return JSON.stringify(a).localeCompare(JSON.stringify(b));\n    } else {\n      return JSON.stringify(b).localeCompare(JSON.stringify(a));\n    }\n  }\n\n  groupingSort(\n    a: string,\n    b: string,\n    direction: 'asc' | 'desc' = 'asc'\n  ): number {\n    if (direction === 'asc') {\n      return a.localeCompare(b);\n    } else {\n      return b.localeCompare(a);\n    }\n  }\n\n  groupBy(item: T): string | string[] {\n    return JSON.stringify(item);\n  }\n\n  fieldTransform?(field: string): string | Promise<string> {\n    return field;\n  }\n}\n", "import {SortStrategy} from '../types/sorting.types';\nimport {RecipeDTO} from '../../../features/recipes/service/schemes/Recipe.scheme';\nimport {BaseGrouping} from './base-grouping';\nimport {CategoryRecipesRepository} from '../../../features/settings/service/repositories/category-recipes.repository';\n\nexport class CategoryRecipeSortStrategy\n  extends BaseGrouping<RecipeDTO> {\n  constructor(\n    public categoryRecipesRepository: CategoryRecipesRepository,\n  ) {\n    super();\n  }\n\n  override groupBy(item: RecipeDTO): string {\n    return item.category_id || '';\n  }\n\n  override innerSort(\n    a: RecipeDTO,\n    b: RecipeDTO,\n    direction: 'asc' | 'desc',\n    field: string = 'name'\n  ): number {\n    return recipeInnerSortFunction(a, b);\n  }\n\n  override groupingSort(\n    a: string,\n    b: string,\n    direction: 'asc' | 'desc',\n  ): number {\n    if (direction === 'asc') {\n      return a.localeCompare(b);\n    } else {\n      return b.localeCompare(a);\n    }\n  }\n\n  override async fieldTransform(field: string) {\n    const category = await this.categoryRecipesRepository.getOne(field);\n    return category?.name || field;\n  }\n}\n\nexport class TagsRecipeSortStrategy\n  extends BaseGrouping<RecipeDTO> {\n  override groupBy(item: RecipeDTO) {\n    return item.tags?.map(tag => tag.toString()) || '';\n  }\n\n  override innerSort(\n    a: RecipeDTO,\n    b: RecipeDTO,\n    direction: 'asc' | 'desc',\n    field: string = 'name'\n  ): number {\n    return recipeInnerSortFunction(a, b);\n  }\n}\n\nexport class RecipeAlphabeticalSortStrategy\n  extends BaseGrouping<RecipeDTO> {\n  override groupBy(item: RecipeDTO): string {\n    return item.name.toLowerCase().charAt(0);\n  }\n\n  override innerSort(\n    a: RecipeDTO,\n    b: RecipeDTO,\n    direction: 'asc' | 'desc',\n    field: string = 'name'\n  ): number {\n    return recipeInnerSortFunction(a, b);\n  }\n\n  override groupingSort(\n    a: string,\n    b: string,\n    direction: 'asc' | 'desc',\n  ): number {\n    if (direction === 'asc') {\n      return a.localeCompare(b);\n    } else {\n      return b.localeCompare(a);\n    }\n  }\n}\n\nexport class RecipeCreatedAtMonthSortStrategy\n  implements SortStrategy<RecipeDTO> {\n  groupBy(item: RecipeDTO): string {\n    const date = item.createdAt ? new Date(item.createdAt) : new Date();\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${('0' + date.getDate()).slice(-2)}`;\n  }\n\n  innerSort(\n    a: RecipeDTO,\n    b: RecipeDTO,\n    direction: 'asc' | 'desc',\n    field: string = 'createdAt'\n  ): number {\n    return recipeInnerSortFunction(a, b);\n  }\n\n  groupingSort(\n    a: string,\n    b: string,\n    direction: 'asc' | 'desc',\n  ): number {\n    const [yearA, monthA, dayA] = a.split('-').map(Number);\n    const [yearB, monthB, dayB] = b.split('-').map(Number);\n    const dateA = new Date(yearA, monthA - 1, dayA);\n    const dateB = new Date(yearB, monthB - 1, dayB);\n    if (direction === 'asc') {\n      return dateA.getTime() - dateB.getTime();\n    } else {\n      return dateB.getTime() - dateA.getTime();\n    }\n  }\n}\n\nexport const recipeInnerSortFunction = (\n  a: RecipeDTO,\n  b: RecipeDTO,\n  direction: 'asc' | 'desc' = 'asc',\n  field: string = 'name'\n): number => {\n  if (!a || !b) return 0;\n  if (field === 'name') {\n    if (direction === 'asc') {\n      return (a as any)[field]?.toString()?.localeCompare((b as any)[field]) || 0;\n    } else {\n      return (b as any)[field]?.toString()?.localeCompare((a as any)[field]) || 0;\n    }\n  } else if (field === 'createdAt') {\n    const dateA = new Date((a as any)[field]);\n    const dateB = new Date((b as any)[field]);\n    return direction === 'asc' ? dateA.getTime() - dateB.getTime() : dateB.getTime() - dateA.getTime();\n  }\n  return 0\n}\n", "import {inject, InjectionToken} from '@angular/core';\nimport {from, map, Observable, shareReplay, switchMap} from 'rxjs';\nimport {RecipeDTO} from '../schemes/Recipe.scheme';\nimport {SortResult, SortStrategy} from '../../../../shared/service/types/sorting.types';\nimport {GroupSortService} from '../../../../shared/service/services/grouping-sorting.service';\nimport {RecipesRepository} from './recipes.repository';\nimport {injectQueryParams} from '../../../../shared/helpers';\nimport {CategoryRecipesRepository} from '../../../settings/service/repositories/category-recipes.repository';\nimport {Recipe} from '../models/Recipe';\nimport {\n  CategoryRecipeSortStrategy,\n  RecipeAlphabeticalSortStrategy,\n  RecipeCreatedAtMonthSortStrategy,\n  TagsRecipeSortStrategy\n} from '../../../../shared/service/groupings/recipes.grouping';\n\nexport const CATEGORIZED_RECIPES_LIST = new InjectionToken<Observable<SortResult<RecipeDTO>>>('CategorizedRecipesList', {\n  factory: () => {\n    const groupSortService = inject(GroupSortService);\n    const recipesRepository = inject(RecipesRepository);\n    const groupingParam = injectQueryParams('groupBy');\n    const sortDirection = injectQueryParams<string | null>('sortDirection');\n    const sortField = injectQueryParams('sortField');\n    const filterField = injectQueryParams('filterField');\n    const filterValue = injectQueryParams('filterValue');\n    const filterOperator = injectQueryParams('filterOperator');\n    const categoryRepository = inject(CategoryRecipesRepository);\n    const recipes = from(recipesRepository.loadRecipes({\n      key: filterField() as keyof Recipe,\n      value: filterValue(),\n      operator: 'equals'\n    })).pipe(\n      switchMap(() => recipesRepository.recipes$),\n      map((recipes: Recipe[]) => recipes.map((recipe: Recipe) => recipe.toDTO())),\n    );\n    const groupingMap: Record<string, () => any> = {\n      'createdAt': () => new RecipeCreatedAtMonthSortStrategy(),\n      'category': () => new CategoryRecipeSortStrategy(categoryRepository),\n      'alphabetical': () => new RecipeAlphabeticalSortStrategy(),\n      'tag': () => new TagsRecipeSortStrategy(),\n    }\n\n    return recipes.pipe(\n      switchMap((recipes: RecipeDTO[]) => {\n        const grouping = groupingParam() as string;\n        const strategy: SortStrategy<any> = groupingMap[grouping]?.() ?? groupingMap['category']();\n\n        return groupSortService.groupItems<RecipeDTO>(\n          recipes,\n          strategy,\n          (sortDirection() as any) ?? 'asc',\n          (sortField() as any) ?? 'name',\n        );\n      }),\n      shareReplay(1),\n    );\n  },\n});\n", "import {ChangeDetectionStrategy, Component, computed, inject, signal} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TranslatePipe, TranslateService} from '@ngx-translate/core';\nimport {FlexRowComponent} from '../../../../shared/view/layout/flex-row.component';\nimport {injectQueryParams} from '../../../../shared/helpers';\nimport {ButtonComponent} from '../../../../shared/view/ui/button.component';\nimport {DropdownComponent} from '../../../controls/dropdown/dropdown.component';\nimport {FlexColumnComponent} from '../../../../shared/view/layout/flex-column.component';\n\n@Component({\n  selector: 'lg-recipes-filters',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    FlexRowComponent,\n    ButtonComponent,\n    DropdownComponent,\n    FlexColumnComponent,\n    TranslatePipe\n  ],\n  template: `\n    <lg-flex-row [mobileMode]=\"true\"\n                 size=\"medium\">\n      <lg-dropdown>\n        <lg-button [outlined]=\"true\"\n                   [size]=\"'small'\"\n                   [style]=\"'default'\"\n                   lgDropdownAnchor>\n          {{ filterLabel() }}\n        </lg-button>\n\n        <lg-flex-column [size]=\"'small'\">\n          <lg-button (click)=\"onFilterChange({field: 'master', value: 'true'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ 'recipes.filters.master' | translate }}\n          </lg-button>\n          <lg-button (click)=\"onFilterChange({field: 'master', value: 'false'})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ 'recipes.filters.chunk' | translate }}\n          </lg-button>\n\n          <lg-button (click)=\"onFilterChange({field: undefined, value: undefined})\"\n                     [flat]=\"true\"\n                     [size]=\"'small'\"\n                     [style]=\"'warning'\">\n            {{ 'recipes.filters.all' | translate }}\n          </lg-button>\n        </lg-flex-column>\n      </lg-dropdown>\n    </lg-flex-row>\n  `\n})\nexport class RecipesFiltersComponent {\n  constructor(\n    private translateService: TranslateService\n  ) {\n  }\n\n  readonly router = inject(Router);\n  readonly aRouter = inject(ActivatedRoute);\n  readonly filterValue = injectQueryParams('filterValue');\n  readonly filterField = injectQueryParams('filterField');\n  readonly filters = signal<{\n    field?: string\n    value?: string\n  }>({});\n  filterLabel = computed(() => {\n    if (this.filters().field === 'master') {\n      if (this.filters().value === 'true') {\n        return this.translateService.instant('recipes.filters.master');\n      } else if (this.filters().value === 'false') {\n        return this.translateService.instant('recipes.filters.chunk');\n      }\n    }\n    return this.translateService.instant('recipes.filters.all');\n  });\n\n  ngOnInit() {\n    const value = this.filterValue();\n    const field = this.filterField();\n\n    this.filters.set({\n      field: field?.toString() || undefined,\n      value: value?.toString() || undefined\n    });\n  }\n\n  onFilterChange(\n    props: {\n      field?: string\n      value?: string\n    }\n  ) {\n    this.router.navigate([], {\n      queryParams: {\n        filterField: props.field,\n        filterValue: props.value,\n      },\n      relativeTo: this.aRouter,\n      queryParamsHandling: 'merge',\n    }).then(() => {\n      // update page\n      window.location.reload();\n    })\n  }\n\n}\n", "import {Component, DestroyRef, inject} from '@angular/core';\nimport {RecipesRepository} from '../../service/providers/recipes.repository';\nimport {FlexRowComponent} from '../../../../shared/view/layout/flex-row.component';\nimport {ButtonComponent} from '../../../../shared/view/ui/button.component';\nimport {RouterLink} from '@angular/router';\nimport {MatIcon} from '@angular/material/icon';\nimport {ContainerComponent} from '../../../../shared/view/layout/container.component';\nimport {TitleComponent} from '../../../../shared/view/layout/title.component';\nimport {takeUntilDestroyed, toSignal} from '@angular/core/rxjs-interop';\nimport {NotificationsService} from '../../../../shared/service/services/notifications.service';\nimport {Stores} from '../../../../shared/service/db/const/stores';\nimport {ImportComponent} from '../../../../shared/view/ui/import/import.component';\nimport {TransferDataService} from '../../../../shared/service/services/transfer-data.service';\nimport {ImportRowTplDirective} from '../../../../shared/view/ui/import/import-row-tpl.directive';\nimport {FadeInComponent} from '../../../../shared/view/ui/fade-in.component';\nimport {ControlsBarComponent} from '../../../../shared/view/ui/controls-bar/controls-bar.component';\nimport {SelectionToolsComponent} from '../../../controls/form/selection-tools.component';\nimport {SelectionZoneService} from '../../../../shared/service/services/selection-zone.service';\nimport {TimeAgoPipe} from '../../../../shared/view/pipes/time-ago.pipe';\nimport {RecipeScheme} from '../../service/schemes/Recipe.scheme';\nimport {PullDirective} from '../../../../shared/view/directives/pull.directive';\nimport {TranslateDirective, TranslatePipe} from '@ngx-translate/core';\nimport {DraftRecipesListComponent} from './draft-recipes-list.component';\nimport {\n  InlineSeparatedGroupComponent,\n  InlineSeparatedGroupDirective\n} from '../../../../shared/view/ui/inline-separated-group.component';\nimport {GroupingSortingComponent} from '../../../../shared/view/ui/grouping-sorting/grouping-sorting.component';\nimport {GroupingTilesComponent} from '../../../../shared/view/ui/grouping-tiles/grouping-tiles.component';\nimport {CATEGORIZED_RECIPES_LIST} from '../../service/providers/categorized-recipes-list.token';\nimport {GroupingTileDirective} from '../../../../shared/view/ui/grouping-tiles/grouping-tile.directive';\nimport {FlexColumnComponent} from '../../../../shared/view/layout/flex-column.component';\nimport {CardComponent} from '../../../../shared/view/ui/card/card.component';\nimport {RecipesFiltersComponent} from './recipes-filters.component';\nimport {matchMediaSignal} from '../../../../shared/view/signals/match-media.signal';\nimport {mobileBreakpoint} from '../../../../shared/view/const/breakpoints';\n\n\n@Component({\n  selector: 'lg-recipes-list',\n  standalone: true,\n  template: `\n    @if (!groupingTiles.empty()) {\n      <lg-controls-bar>\n        <lg-button [icon]=\"true\"\n                   [link]=\"'/recipes/add'\"\n                   [size]=\"'medium'\"\n                   [style]=\"'primary'\">\n          <mat-icon aria-hidden=\"false\" fontIcon=\"add\"></mat-icon>\n        </lg-button>\n\n        <lg-inline-separated-group>\n          <ng-template lgInlineSeparatedGroup>\n            <lg-button (click)=\"exportRecipes(selectionZoneService.selected())\"\n                       [flat]=\"true\"\n                       [size]=\"'small'\"\n                       [style]=\"'solid'\">\n              {{ 'export-label'|translate }}\n            </lg-button>\n          </ng-template>\n          <ng-template lgInlineSeparatedGroup>\n            <lg-import (onDone)=\"loadRecipes()\"\n                       [label]=\"('import-label'|translate)\"\n                       [schema]=\"RecipeScheme\"\n                       [storeName]=\"Stores.RECIPES\">\n              <ng-template let-flow=\"flow\" let-row lgImportRowTpl>\n                <span>{{ row?.name }}</span>\n              </ng-template>\n            </lg-import>\n          </ng-template>\n        </lg-inline-separated-group>\n      </lg-controls-bar>\n    }\n\n    <lg-fade-in>\n      <lg-container>\n        <lg-flex-row [center]=\"true\">\n          <lg-title>\n            {{ 'recipes.list-title'|translate }}\n\n            <span [translateParams]=\"{length:recipes()?.length}\"\n                  [translate]=\"'filters.results.length'\"\n                  class=\"text-muted text-small\"></span>\n          </lg-title>\n        </lg-flex-row>\n\n        <lg-draft-recipes-list></lg-draft-recipes-list>\n\n\n        <lg-flex-column [size]=\"'medium'\">\n          <lg-flex-row [center]=\"!isMobile()\"\n                       [mobileMode]=\"true\"\n                       [size]=\"'medium'\">\n            <lg-recipes-filters></lg-recipes-filters>\n\n            <lg-grouping-sorting></lg-grouping-sorting>\n          </lg-flex-row>\n\n          @if (!groupingTiles.empty()) {\n            <lg-selection-tools [selectionTypes]=\"['recipe']\"></lg-selection-tools>\n          }\n        </lg-flex-column>\n\n        <lg-grouping-tiles #groupingTiles\n                           [selectable]=\"true\"\n                           [sortResult]=\"recipes()\">\n          <ng-template let-recipe lgGroupingTile>\n            <lg-card>\n              <lg-flex-column size=\"medium\">\n                <a [routerLink]=\"'/recipes/edit/' + recipe.uuid\">\n                  {{ recipe.name }}\n                </a>\n\n                <lg-flex-row>\n                  <lg-button [flat]=\"true\"\n                             [link]=\"'/recipes/calculate/' + recipe.uuid\"\n                             [size]=\"'small'\"\n                             [style]=\"'success'\">\n                    {{ 'recipes.calculate-btn'|translate }}\n                  </lg-button>\n\n                  <small class=\"text-muted text-cursive\" lgPull>\n                    {{ 'edited-at-label'|translate }} {{ (recipe?.updatedAt || recipe?.createdAt) | timeAgo }}\n                  </small>\n                </lg-flex-row>\n              </lg-flex-column>\n            </lg-card>\n          </ng-template>\n\n          <lg-flex-column empty-state\n                          position=\"center\"\n                          size=\"medium\">\n            {{ 'recipes.empty-state.text'|translate }}\n\n            <lg-button [link]=\"'/recipes/add'\"\n                       [size]=\"'medium'\"\n                       [style]=\"'primary'\">\n              {{ 'recipes.empty-state.btn'|translate }}\n            </lg-button>\n          </lg-flex-column>\n        </lg-grouping-tiles>\n      </lg-container>\n    </lg-fade-in>\n  `,\n  providers: [\n    SelectionZoneService,\n  ],\n  imports: [\n    FlexRowComponent,\n    ButtonComponent,\n    RouterLink,\n    MatIcon,\n    ContainerComponent,\n    TitleComponent,\n    ImportComponent,\n    ImportRowTplDirective,\n    FadeInComponent,\n    ControlsBarComponent,\n    SelectionToolsComponent,\n    TimeAgoPipe,\n    PullDirective,\n    TranslatePipe,\n    DraftRecipesListComponent,\n    InlineSeparatedGroupComponent,\n    InlineSeparatedGroupDirective,\n    GroupingSortingComponent,\n    GroupingTilesComponent,\n    GroupingTileDirective,\n    FlexColumnComponent,\n    CardComponent,\n    RecipesFiltersComponent,\n    TranslateDirective,\n  ],\n  styles: [\n    `:host {\n      display: block;\n    }\n    `\n  ]\n})\nexport class RecipesListComponent {\n  constructor(\n    private _recipesRepository: RecipesRepository,\n    private _notificationsService: NotificationsService,\n    private _transferDataService: TransferDataService,\n    public selectionZoneService: SelectionZoneService,\n  ) {\n    this.selectionZoneService.onDelete.pipe(\n      takeUntilDestroyed(this.destroyRef),\n    ).subscribe(key => {\n      this.deleteRecipe(key);\n    });\n  }\n\n  destroyRef = inject(DestroyRef);\n  recipes = toSignal(inject(CATEGORIZED_RECIPES_LIST));\n  readonly isMobile = matchMediaSignal(mobileBreakpoint);\n  protected readonly Stores = Stores;\n  protected readonly RecipeScheme = RecipeScheme;\n\n  ngOnInit() {\n    this.loadRecipes();\n  }\n\n  deleteRecipe(uuid: string | undefined) {\n    if (!uuid) {\n      return;\n    }\n    this._recipesRepository.deleteOne(uuid).then(() => {\n      this._notificationsService.success('recipe.deleted');\n      this.loadRecipes();\n    });\n  }\n\n  loadRecipes() {\n    return this._recipesRepository.loadRecipes();\n  }\n\n  exportRecipes(\n    selected: Set<string>,\n  ) {\n    return this._transferDataService.exportTable(Stores.RECIPES, 'json', {\n      selected: Array.from(selected || []),\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["recipes", "_c0"]
}
