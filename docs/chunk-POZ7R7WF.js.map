{
  "version": 3,
  "sources": ["src/app/shared/view/ui/grouping-tiles/grouping-tile.directive.ts", "src/app/shared/view/ui/selectable-section.component.ts", "src/app/shared/view/ui/grouping-tiles/grouping-header.directive.ts", "src/app/shared/view/ui/grouping-tiles/grouping-tiles.component.ts"],
  "sourcesContent": ["import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[lgGroupingTile]',\n  standalone: true\n})\nexport class GroupingTileDirective {\n  constructor(\n    public templateRef: TemplateRef<any>,\n  ) {\n  }\n}\n", "import {Component, ContentChildren, effect, input, Optional, output, QueryList, SkipSelf} from '@angular/core';\nimport {CardListItemDirective} from './card/card-list-item.directive';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {CheckboxComponent} from './form/chckbox.component';\nimport {ButtonComponent} from './layout/button.component';\nimport {MatIcon} from '@angular/material/icon';\nimport {SelectionZoneService} from '../../service/services';\nimport {generateUuid} from '../../helpers/attribute.helper';\n\n@Component({\n  selector: 'lg-selectable-section',\n  standalone: true,\n  template: `\n    <section class=\"lg-selectable-section\">\n      @if (selectionZoneService.selectionMode() === 'selection') {\n        <lg-checkbox [size]=\"'medium'\"\n                     [formControl]=\"selected\"\n                     [value]=\"key()\"\n                     (onCheckboxChanged)=\"onChanges($event)\"></lg-checkbox>\n      }\n      <div class=\"lg-selectable-section__inner\">\n        <ng-content></ng-content>\n      </div>\n      @if (selectionZoneService.selectionMode() === 'selection') {\n        <lg-button [style]=\"'danger'\"\n                   [size]=\"'tiny'\"\n                   [icon]=\"true\"\n                   (click)=\"selectionZoneService.putDelete(key())\">\n          <mat-icon aria-hidden=\"false\"\n                    fontIcon=\"close\"></mat-icon>\n        </lg-button>\n      }\n    </section>\n  `,\n  styles: [\n    `\n\n      .lg-card-list {\n      }\n\n      .lg-checkbox {\n        --control-bg: #abc2ff;\n        --control-bg-selected: #abc2ff;\n      }\n\n      .lg-selectable-section {\n        display: flex;\n        gap: 8px;\n        align-items: center;\n      }\n\n    `\n  ],\n  imports: [\n    ReactiveFormsModule,\n    CheckboxComponent,\n    ButtonComponent,\n    MatIcon\n  ]\n})\nexport class SelectableSectionComponent {\n  constructor(\n    @Optional() @SkipSelf() public selectionZoneService: SelectionZoneService\n  ) {\n  }\n\n  key = input<string>(generateUuid());\n  @ContentChildren(CardListItemDirective) items!: QueryList<CardListItemDirective>;\n  selected = new FormControl()\n\n  effectMode = effect(() => {\n    if (this.selectionZoneService.selectionMode()) {\n      this.selected.reset();\n    }\n  });\n\n  effectSelectAll = effect(() => {\n    if (this.selectionZoneService.selectAll()) {\n      this.selected.setValue(true);\n    } else if (this.selectionZoneService.deselectAll()) {\n      this.selected.setValue(false);\n    }\n  })\n\n  onChanges(\n    event: boolean | string | null | undefined\n  ) {\n    this.selectionZoneService.putSelected([!!event, this.key()]);\n  }\n}\n", "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[lgGroupingHeader]',\n  standalone: true\n})\nexport class GroupingHeaderDirective {\n  constructor(public templateRef: TemplateRef<any>) {}\n} ", "import {Component, computed, ContentChild, input, Optional} from '@angular/core';\nimport {SortResult} from '../../../service/types/sorting.types';\nimport {TitleComponent} from '../layout/title/title.component';\nimport {GroupingTileDirective} from './grouping-tile.directive';\nimport {NgTemplateOutlet} from '@angular/common';\nimport {SelectableSectionComponent} from '../selectable-section.component';\nimport {SelectionZoneService} from '../../../service/services';\nimport {GroupingHeaderDirective} from './grouping-header.directive';\nimport {TranslateService} from '@ngx-translate/core';\n\n@Component({\n  selector: 'lg-grouping-tiles',\n  standalone: true,\n  template: `\n    <section class=\"grouping-tiles\">\n      @for (group of sortResult()?.groups; track group?.field) {\n        <section class=\"grouping-tiles__section\">\n          <header class=\"grouping-tiles__header\">\n            @if (groupingHeaderDirective) {\n              <ng-container [ngTemplateOutlet]=\"groupingHeaderDirective.templateRef\"\n                            [ngTemplateOutletContext]=\"{ $implicit: group?.field }\">\n              </ng-container>\n            } @else {\n              <lg-title [level]=\"3\">\n                {{ group?.field || translateService.instant('unknown') }}\n              </lg-title>\n            }\n          </header>\n\n          <div class=\"grouping-tiles__content\">\n            @for (tile of group?.items; track tile) {\n              <div class=\"grouping-tiles__item\">\n                @if (selectable()) {\n                  <lg-selectable-section [key]=\"tile.uuid\">\n                    <div class=\"grouping-tiles__item-inner\">\n                      <ng-container [ngTemplateOutlet]=\"groupingTileDirective!.templateRef\"\n                                    [ngTemplateOutletContext]=\"{ $implicit: tile }\">\n                      </ng-container>\n                    </div>\n                  </lg-selectable-section>\n                } @else {\n                  <div class=\"grouping-tiles__item-inner\">\n                    <ng-container [ngTemplateOutlet]=\"groupingTileDirective!.templateRef\"\n                                  [ngTemplateOutletContext]=\"{ $implicit: tile }\">\n                    </ng-container>\n                  </div>\n                }\n              </div>\n            }\n          </div>\n        </section>\n      } @empty {\n        <ng-content select=\"[empty-state]\">\n        </ng-content>\n      }\n    </section>\n  `,\n  imports: [\n    TitleComponent,\n    NgTemplateOutlet,\n    SelectableSectionComponent\n  ],\n  styles: [`\n    .grouping-tiles {\n      display: flex;\n      flex-direction: column;\n      gap: 32px;\n    }\n\n    .grouping-tiles__section {\n      display: flex;\n      flex-direction: column;\n      gap: 24px;\n    }\n\n    .grouping-tiles__header {\n    }\n\n    .grouping-tiles__content {\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n\n    .grouping-tiles__item {\n      display: flex;\n      align-items: stretch;\n      width: 100%;\n    }\n\n    .grouping-tiles__item-inner {\n      display: flex;\n      align-items: stretch;\n      width: 100%;\n    }\n  `]\n})\nexport class GroupingTilesComponent {\n  constructor(\n    @Optional() public selectionZoneService: SelectionZoneService,\n    public translateService: TranslateService,\n  ) {\n  }\n\n  sortResult = input<SortResult<any> | undefined>(undefined);\n  selectable = input<boolean>(false);\n  empty = computed(() => {\n    return !this.sortResult()?.groups.length;\n  });\n\n  @ContentChild(GroupingTileDirective) groupingTileDirective!: GroupingTileDirective;\n  @ContentChild(GroupingHeaderDirective) groupingHeaderDirective!: GroupingHeaderDirective;\n}\n"],
  "mappings": "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",
  "names": []
}
